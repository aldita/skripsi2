{
    "collab_server" : "",
    "contents" : "#source('tools/analysis/eclat/eclattest.R')\n\nlibrary(arules)\nlibrary(arulesViz)\n\n# untuk memindahkan panel kembali ke data setiap berpindah menu\nobserve({\n  if(!identical(input$nav_fast, \"Eclat\")){\n    updateTabsetPanel(session, \"eclattab\", selected = \"Data\")\n  }\n  \n  \n  #upload <- reactive({\n  #  getdata()\n  #})\n  \n  #Getting data\n  dat <- reactive({\n    getdata()\n  })\n  \n  #Getting var of data for general\n  vars <- reactive({\n    if (!is.null(dat()))\n      var <- names(dat())\n    else\n      var <- NULL\n    var\n  })\n  \n  #getting variable data for item\n  variable <- reactive({\n    if (!is.null(vars()))\n      var <- as.list(vars()[])\n    else\n      var <- NULL\n    var\n  })\n  \n  #getting variable if there is id for basket item\n  id <- reactive({\n    if (!is.null(vars()))\n      var <-\n        as.list(vars()[which(!(vars() %in% input$chooseVar))])\n    else\n      var <- NULL\n    var\n  })\n  \n  #getting variable data for item\n  variable <- reactive({\n    if (!is.null(vars()))\n      var <- as.list(vars()[])\n    else\n      var <- NULL\n    var\n  })\n  \n  output$eclat <- renderUI({\n    sidebarLayout(\n      sidebarPanel(\n        div(class=\"busy\", p(\"Calculation in progress...\"), img(src=\"ajaxloaderq.gif\")),\n        uiOutput(outputId = 'nav_menu'),\n        bsCollapse(\n          open = \"Data Properties\",\n          bsCollapsePanel(\n            \"Data Properties\",\n            \n            uiOutput(outputId = 'chooseVarEclat'),\n            checkboxInput(\n              \"singleToBasket\",\"Aggregate item\", FALSE\n            ),\n            conditionalPanel(condition = \"input.singleToBasket==true\",\n                             uiOutput(\"chooseId\"))\n            #checkboxInput(\"removeDataEclat\",h5(\"Remove duplicated item\"), FALSE)\n            #uiOutput(outputId = 'SelectDeselect'),\n            #uiOutput(outputId = 'input_y')\n          ),\n          \n          bsCollapsePanel(\"Parameter Properties\",\n                          \n                          #uiOutput(\"paramFreq\"),\n                          numericInput(\n                            \"minSupEclat\",\"Minimum support :\", min = 0.0001, max = 1, value =\n                              0.1, step = 0.0001\n                          ),\n                          numericInput(\n                            \"minConfEclat\",\"Minimum confidence :\", min = 0.0001, max = 1.0001, value = 0.1,step =\n                              0.0001\n                          ),\n                          numericInput(\n                            \"minIEclat\",\"Minimum item(s):\", min = 1,value = 1, step = 1\n                          ),\n                          numericInput(\n                            \"maxIEclat\",\"Maximum items:\", min = 2,value = 10, step = 1\n                          ),\n                          checkboxInput(\"removeRedundant\", \"Remove redundant\", FALSE),\n                          #actionButton(\"getRules\",\"Get Results\")\n                          checkboxInput(\n                            \"intMea\",\"Add Interest Measure\", FALSE\n                          ),\n                          conditionalPanel(\n                            condition = \"input.intMea==true\",\n                            checkboxGroupInput(\n                              \"intmeasure\", \"Choose interest measure(s):\",\n                              c(\n                                \"chi-squared\" = \"chiSquared\",\n                                \"kulczynski\" = \"kulczynski\",\n                                \"imbalance\" = \"imbalance\",\n                                \"RPF\" = \"RPF\"\n                              )\n                            )\n                          )\n                          \n          ),\n          \n          bsCollapsePanel(\"Plot Properties\",\n                          uiOutput(\"sidePlot\")\n          ),\n          \n          bsCollapsePanel(\n            \"Report\",\n            \n            strong(\"Generate Your Report\"),\n            wellPanel(radioButtons(\"formatApriori\", \"Document format:\", c(\"Word\",\"PDF\" ,\"HTML\")),\n                      downloadButton(\"downloadReportApriori\")),br(),\n            strong(\"Share Your Report\"),\n            bsButton(\"aprioriShareForum\", \"Share to Forum\", style = \"primary\", type = \"action\"),br(),br(),\n            \n            bsModal2(\"popAprioriShareForum\", \"Share Your Analysis\", trigger = \"aprioriShareForum\",\n                     uiOutput(\"modalShareApriori\")))\n          \n        )\n      ),\n      mainPanel(\n        div(class=\"busy\", p(\"Calculation in progress...\"), img(src=\"ajaxloaderq.gif\")),\n        tabsetPanel(\n          id = 'eclattab',\n          tabPanel(\n            title = \"Data\",\n            tabsetPanel(\n              id = 'DataEclat',\n              tabPanel(\n                title = \"Original Data\",\n                uiOutput('preprop')\n              ),\n              \n              tabPanel(\n                title = \"Transaction Data\",\n                uiOutput('transaksiEclat')\n              ),\n              \n              tabPanel(\n                title = \"Vertical Transaction Data\",\n                uiOutput('transaksiVertikal')\n              )\n            )\n            #uiOutput('tampil_data')\n          ),\n          \n          tabPanel(\n            title = \"Result\",\n            tabsetPanel(\n              id = 'SummaryEclat',\n              tabPanel(\n                title = \"Frequent Itemsets\",\n                div(class=\"busy\", p(\"Calculation in progress...\"), img(src=\"ajaxloaderq.gif\")),\n                wellPanel(style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n                          dataTableOutput(\"iFreq\"))\n                #uiOutput('tampil_tabel')\n                #uiOutput('tampil_frek')\n              ),\n              \n              tabPanel(\n                title = \"Rules\",\n                div(class=\"busy\", p(\"Calculation in progress...\"), img(src=\"ajaxloaderq.gif\")),\n                wellPanel(style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n                          dataTableOutput(\"rulesEclat\"))\n                #uiOutput('tampil_rules')\n              )\n            )\n            #uiOutput('tampil_summary')\n          ),\n          \n          tabPanel(\n            title = \"Plot\",\n            tabsetPanel(\n              id = 'PlotEclat',\n              tabPanel(\n                title = \"Scatter Plot\",\n                div(\n                  class = \"busy\",\n                  p(\"Calculation in progress...\"),\n                  img(src = \"ajaxloaderq.gif\")\n                ),\n                plotOutput(\"ScatterPlot\")\n                #uiOutput('tampil_scatter')\n              ),\n              \n              tabPanel(\n                title = \"Grouped Plot\",\n                div(\n                  class = \"busy\",\n                  p(\"Calculation in progress...\"),\n                  img(src = \"ajaxloaderq.gif\")\n                ),\n                plotOutput(\"GroupedPlot\")\n                #uiOutput('tampil_grouped')\n              ),\n              \n              tabPanel(\n                title = \"Graph Plot\",\n                div(\n                  class = \"busy\",\n                  p(\"Calculation in progress...\"),\n                  img(src = \"ajaxloaderq.gif\")\n                ),\n                plotOutput(\"GraphPlot\")\n                #uiOutput('tampil_graph')\n              )\n              \n              #tabPanel(\n              #  title = \"Paracoord Plot\",\n              #  div(\n              #    class = \"busy\",\n              #    p(\"Calculation in progress...\"),\n              #    img(src = \"ajaxloaderq.gif\")\n              #  ),\n              #  plotOutput(\"ParacoordPlot\")\n              #uiOutput('tampil_paracoord')\n              #)\n            )\n            #uiOutput('tampil_plot')\n          )\n          #tabPanel(\n          #  title = \"tabel\",\n          #  uiOutput('tampil_tabel')\n          #),\n          #tabPanel(\n          #  title = \"plot\",\n          #  plotOutput('tampil_plot')\n          #)\n        )\n        \n      )\n    )\n  })\n  \n  output$input_x <- renderUI({\n    vars<- upload()\n    selectInput(inputId= \"x\", label= \"Pilih X: \",\n                choices= names(vars), selected= state_multvar(\"x\", vars), multiple=F, selectize= F)  \n  })\n  \n  output$input_y <- renderUI({\n    vars<- upload()\n    selectInput(inputId= \"y\", label= \"Pilih y: \",\n                choices= names(vars), selected= state_multvar(\"y\", vars), multiple=T, selectize= T)  \n  })\n  \n  output$tampil_tabel <- renderTable({\n    x <- input$minConfEclat\n    y <- input$minSupEclat\n    z <- input$maxIEclat\n    \n    cbind(x,y,z)\n  })\n  \n  #output$tampil_plot <- renderPlot({\n  #  datah <- upload()\n  #  x <- datah[,input$x]\n  #  y <- datah[,input$y]\n  \n  #  plot(x,y)\n  #})\n  \n  output$nav_menu <- renderUI({\n    wellPanel(\n      HTML(paste(\"<label><strong>Menu:\",\"Association Rule\",\"</strong></label>\")),\n      HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label><br>\")),\n      HTML(paste(\"<label><strong>Data:\",input$datasets,\"</strong></label><br>\")),\n      helpAndReport2(\n        'Eclat','eclatHelp', inclMD2(\"tools/help/eclat.md\")\n      )\n    ) # tool status\n  })\n  \n  #UI button select\n  #output$selectDeselect <- renderUI({\n  #  vars<- upload()\n  #if (!is.null(variable())) {\n  #    actionButton(\"selectDeselect\", \"Select/Deselect all\", class = \"btn-block btn-primary\")\n  #}\n  #})\n  \n  #UI pilih variabel\n  output$chooseVarEclat <- renderUI({\n    #vars<- upload()\n    #if (!is.null(input$selectDeselect)) {\n    #  if (input$selectDeselect %% 2 == 0) {\n    #    selectInput(\n    #      \"chooseVar\",\"Select one or more variables:\",names(vars),names(vars),multiple =T\n    #    )\n    #  } else {\n    selectInput(\n      \"chooseVar\",\"Select variable(s):\",variable(),selected = NULL,multiple =T, selectize= T\n    )\n    #  }\n    #}\n  })\n  \n  #UI memilih id \n  output$chooseId <- renderUI({\n    selectInput(\"chooseId\",\"Aggregate by:\",id(),selected = NULL,multiple= T)\n  })\n  \n  #UI input parameter rule\n  \n  \n  \n  output$sidePlot<-renderUI({\n    \n    #numericInput(\"topNFreq\", \"Number of Top Frequency :\", nrow(chooseFreq()), min=1, step=1),\n    numericInput(\n      \"numberRuleEclat\",\"Number of Rules :\", nrow(dataRules()) ,min = 1, step = 1)\n  })\n  \n  #UI preprop\n  output$preprop <- renderUI({\n    list(\n      wellPanel(style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n                renderDataTable({\n                  shiny::validate(need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"))\n                  rawdata()},\n                  options = list(\n                    orderClasses = TRUE, bCaseInsensitive = TRUE,\n                    lengthMenu = c(100, 200, 500), pageLength = 100\n                  )\n                )\n      )\n    )\n  })\n  \n  #UI untuk transaksi Data\n  output$transaksiEclat <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({shiny::validate(need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"))\n          outDataTrans()},options = list(\n            orderClasses = TRUE, bCaseInsensitive = TRUE,\n            lengthMenu = c(100, 200, 500), pageLength = 100\n          ))\n      )\n    )\n  })\n  \n  #UI untuk transaksi Vertikal\n  output$transaksiVertikal <- renderUI({\n    list(\n      wellPanel(\n        style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n        renderDataTable({shiny::validate(need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"))\n          transver()},options = list(\n            orderClasses = TRUE, bCaseInsensitive = TRUE,\n            lengthMenu = c(50,100, 200, 500), pageLength = 100\n          ))\n      )\n    )\n  })\n  \n  #UI frequency each item\n  output$iFreq <- renderDataTable({\n    shiny::validate(need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"),\n                    need(length(frequent()) >0, \"Zero frequent items generated. Please adjust minimum support from Parameter Properties Sidebar\"))\n    frequent()}, options = list(\n      orderClasses = TRUE, bCaseInsensitive = TRUE,\n      lengthMenu = c(10, 20, 30), pageLength = 10\n    )\n  )\n  \n  rawdata <- function(){\n    dfVardata <- as.matrix(dat()[,input$chooseVar])\n    dfVarId <- as.matrix(dat()[,input$chooseId])\n    df <- as.data.frame(cbind(dfVarId,dfVardata))\n    return(df)\n  }\n  \n  dataTrans <- function()\n  {\n    tr_basket <- rawdata()\n    \n    if (!is.null(input$chooseId)){\n      tr_basket <- split(tr_basket[,2],tr_basket[,1]) #aggregat\n      \n      if (input$removeDataEclat == TRUE) { #seems unnecessary\n        tr_basket2 <- sapply(1:length(tr_basket), function(x) unique(tr_basket[[x]])) #rm.duplicated\n        # tr_basket<-as.data.frame(tr_basket)\n        ap<-sapply(1:length(tr_basket2), function(x) if(length(tr_basket2[[x]])>1) paste(tr_basket2[[x]]))\n        names(ap)<-names(tr_basket)\n        tr_basket<-ap[!sapply(ap,is.null)]\n      }\n      \n    }\n    \n    hasil <- as(tr_basket,\"transactions\")\n    return(hasil)\n  }\n  \n  #fungsi transaksi data\n  outDataTrans <- reactive({\n    odt <- as(dataTrans(), \"data.frame\")\n    dtfram <- as.data.frame(cbind(odt[2],odt[1]))\n    colnames(dtfram) <- c(\"transaction ID\",\"itemsets\")\n    return(dtfram)\n  })\n  \n  #transaksi vertikal\n  transver <- function() {\n    tl <- as(dataTrans(), \"tidLists\")\n    return(inspect(tl))\n  }\n  \n  #fungsi transaksi vertikal\n  #outTransver <- reactive({\n  #  odv <- as(transver(), \"data.frame\")\n  #  dtfram <- as.data.frame(cbind(odv[2],odv[1]))\n  #  colnames(dtfram) <- c(\"transaction ID\",\"itemsets\")\n  #  return(dtfram)\n  #})\n  \n  #chooseFreq <- function() {\n  # frequency <- itemFrequency(dataTrans())\n  #frequency <- as.data.frame(frequency)\n  #  item<-rownames(frequency)\n  #  datfram <- as.data.frame(cbind(item,frequency))\n  #  minsup <- minSupEclat()\n  #  minsupCount <- minsup \n  #  datfram <- datfram[datfram$frequency >= minsupCount,] #prune!\n  #  return(datfram)\n  #}\n  \n  #tableItemset <- function(itemset) {\n  #  d <- inspect(dataTrans())[1]  #item pada transaksi\n  #  f <- sapply(1:nrow(d), function(x) gsub(\"\\\\{|\\\\}\",\"\",as.character(d[x,1])))\n  #  item2 <- chooseFreq()[,1]\n  #  b <- combn(item2,itemset)\n  #  combination <- sapply(1:ncol(b),function(i)  paste(b[,i], collapse = \",\"))\n  #  names(data) <- NULL\n  #  dfs <- lapply(list(f, combination), function(x)  melt(strsplit(x, \",\")))\n  #  m <- merge(dfs[[2]], dfs[[1]], by = 1)\n  #  f <- function(n) sum(aggregate(value ~ L1.y, m[m$L1.x == n,], function(x) length(unique(x)) == itemset)$value)\n  #  frequency <- sapply(1:length(combination), f)\n  #  frequency <- as.data.frame(as.numeric(frequency/nrow(dataTrans())))\n  #  datfram <- as.data.frame(cbind(combination, frequency))\n  #  colnames(datfram) <- c(\"combination\",\"frequency\")\n  #  minsupCount <- minSupEclat() \n  #  datfram <- datfram[datfram$frequency >= minsupCount,]\n  #  return(datfram)\n  #}\n  \n  #fungsi frequent itemsets\n  frequent <- function (){\n    f <- ecl()\n    #tl <- tidLists(f)\n    #tl2 <- inspect(tl)\n    tl2 <- inspect(f)\n    return(tl2)\n  }\n  \n  minSupEclat <- function() {\n    minSup <- input$minSupEclat\n    if (minSup < 0.001) {\n      minSup <- 0.1\n      updateNumericInput(session,\"minSupEclat\", value = 0.1)\n    }\n    return(minSup)\n  }\n  \n  minConfEclat <- function() {\n    minConf <- input$minConfEclat\n    if (minConf < 0.0001) {\n      minConf <- 0.1\n      updateNumericInput(session,\"minConfEclat\", value = 0.01)\n    }\n    return(minConf)\n  }\n  \n  minIEclat <- function() {\n    minI <- input$minIEclat\n    if (minI < 1) {\n      minI <- 1\n      updateNumericInput(session,\"minIEclat\",value = 1)\n    }\n    return(minI)\n  }\n  \n  maxIEclat <- function() {\n    maxI <- input$maxIEclat\n    if (maxI < minIEclat()) {\n      maxI <- minIEclat()+1\n      updateNumericInput(session,\"maxIEclat\",value = minIEclat()+1)\n    }\n    return(maxI)\n  }\n  \n  #UI rules\n  output$rulesEclat <- renderDataTable({\n    shiny::validate(need(input$chooseVar !=\"\", \"Please Select one or more Variable(s) of Data from Data Properties Sidebar\"),\n                    #need(length(ecl())>0, \"Zero rules generated. Please adjust minimum support and/or minimum confidence from Parameter Properties Sidebar\"),\n                    need(length(dataRules())>0 , \"Zero rules generated. Please adjust minimum support and/or minimum confidence from Parameter Properties Sidebar\"))\n    dataRules()},  options = list(\n      orderClasses = TRUE, bCaseInsensitive = TRUE,\n      lengthMenu = c(5, 10, 15), pageLength = 5\n    ))\n  \n  output$ScatterPlot <- renderPlot({                \n    shiny::validate(need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    #need(, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    splot()\n  })\n  output$GroupedPlot <- renderPlot({\n    shiny::validate(need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    #need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    goplot()\n  })\n  output$GraphPlot <- renderPlot({\n    shiny::validate(need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    #need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    gaplot()\n  })\n  output$ParacoordPlot <- renderPlot({\n    shiny::validate(need(input$numberRuleEclat >0, \"Please input the number of rules from Plot Properties Sidebar\"))\n    # need(sampel()=0, \"Please increase the number of rules from Plot Properties Sidebar\"))\n    pplot()\n  })\n  \n  #fungsi eclat\n  ecl <- function (){\n    itemsets <-eclat(\n      dataTrans(), parameter = list(\n        supp = minSupEclat(), minlen = minIEclat(), maxlen = maxIEclat(), tidLists= TRUE\n      ))\n    return(itemsets)\n  }\n  \n  #fungsi rules\n  fungsi <- function() {\n    #if (length(ecl())>0){\n    rules<- ruleInduction(ecl(),dataTrans(),confidence = minConfEclat())\n    if(input$removeRedundant==TRUE){\n      rules.pruned <- rules[!is.redundant(rules)]\n      rules<-rules.pruned\n      #} else {\n      #  rules < NULL\n      #}\n    }\n    return(rules)\n  }\n  \n  dataRules <- function() {\n    if (length(ecl())>0) {\n      data<- fungsi()\n      if (!is.null(input$intmeasure)) {\n        quality(data) <-\n          cbind(\n            quality(data), \n            otherin()\n            #interestMeasure(data,c(input$intmeasure), dataTrans()), \n            #RPF=RPF()\n          )}\n      data2 <- inspect(data)\n      data2 <- data2[,-7]\n    } else {\n      data2 <- data.frame()\n    }\n    return(data2)\n  }\n  \n  RPF <- function(){\n    rp <- interestMeasure(fungsi(), \"support\", dataTrans()) * interestMeasure(fungsi(), \"confidence\", dataTrans())\n    return(rp)\n  }\n  \n  #other interest\n  otherin <- function(){\n    rpf      <- \"RPF\"       %in% input$intmeasure\n    chi      <- \"chiSquared\"       %in% input$intmeasure\n    kul      <- \"kulczynski\"       %in% input$intmeasure\n    imb      <- \"imbalance\"       %in% input$intmeasure\n    \n    interest <- NULL\n    if(rpf){\n      interest <- cbind(interest, RPF=RPF())\n    }\n    if(chi) {\n      interest <- cbind(interest, chisquare = interestMeasure(fungsi(),\"chiSquared\", dataTrans()))\n    }\n    if(kul) {\n      interest <- cbind(interest, kulczynski=interestMeasure(fungsi(),\"kulczynski\", dataTrans()))\n    }\n    if(imb) {\n      interest <- cbind(interest, imbalance=interestMeasure(fungsi(),\"imbalance\", dataTrans()))\n    }\n    return(interest)\n  }\n  \n  numberRuleEclat <- function() {\n    nr <- input$numberRuleEclat\n    if (nr > length(fungsi())) {\n      nr <- length(fungsi())\n      updateNumericInput(session,\"numberRuleEclat\", value = length(fungsi()))\n    }\n    return(nr)\n  }\n  \n  #visualisasi\n  sampel <- function(){\n    sam <- sample(fungsi(),numberRuleEclat())\n    return(sam)\n  }\n  \n  splot<- function(){\n    plot <- plot(sampel())\n    return(plot)\n  }\n  \n  goplot<- function(){\n    plot <- plot(sampel(), method = \"grouped\")\n    return(plot)\n  }\n  \n  gaplot<- function(){\n    plot <- plot(sampel(), method = \"graph\")\n    return(plot)\n  }\n  \n  pplot<- function(){\n    plot <- plot(sampel(), method = \"paracoord\", control=list(reorder=TRUE))\n    return(plot)\n  }\n  \n  \n  \n})",
    "created" : 1502178732475.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "988312707",
    "id" : "8D51CFE1",
    "lastKnownWriteTime" : 1502178312,
    "last_content_update" : 1502178312,
    "path" : "~/Skripsi/2/versibaru.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}