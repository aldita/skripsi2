{
    "collab_server" : "",
    "contents" : "#anfis\n\n#fungsi untuk berpindah ke tab awal ketika user berpindah fungsi\nobserve({\n  if(!identical(input$nav_fast, \"ANFIS\")){\n    print(input$nav_fast)\n    updateTabsetPanel(session,\"ANFISmainTab\", selected = \"ANFISfirstTab\")\n  }\n})\n\n#reset ketika user sudah keluar dari menu anfis\nobserve({\n  if(identical(input$nav_fast, \"Data\") || length(input$ANFISindepVarSelected)<2){\n    print(\"Masuk sini\")\n    valuesANFIS$learnButton <- 0\n  }\n})\n\n#menunjukkan status variabel\noutput$statusUIANFIS <- renderUI({\n  wellPanel(\n    HTML(paste(\"<label><strong>Menu:\", \"Soft Computing\",\"</strong></label>\")),\n    HTML(paste(\"<label><strong>Tool:\",isolate(input$nav_fast),\"</strong></label></br>\")),\n    HTML(paste(\"<label><strong>Data:\",input$datasets,\"</strong></label>\"))\n  )\n})\n\n#tampilan utama fuzzy anfis\noutput$anfis <- renderUI({\n  tags$head(tags$script('\n                        Shiny.addCustomMessageHandler(\"resetFileInputHandler\", function(x) {   \n                        var el = $(\"#\" + x);\n                        el.replaceWith(el = el.clone(true));\n                        var id = \"#\" + x + \"_progress\";\n                        var idBar = id + \" .bar\";  \n                        $(id).css(\"visibility\", \"hidden\");\n                        $(idBar).css(\"width\", \"0%\");\n                        });\n                        '))\n  sidebarLayout(\n    sidebarPanel(\n      div(class = \"busy\",\n          p(\"Calculation in progress ...\"),\n          img(src=\"ajaxloaderq.gif\")\n      ),\n      uiOutput(\"statusUIANFIS\"),\n      wellPanel(uiOutput(\"depVarANFIS\"),\n                uiOutput(\"indepVarANFIS\")),\n      \n      conditionalPanel(condition = \"input.ANFISmainTab == 2 || input.ANFISmainTab == 3\", uiOutput(\"parameterANFIS\")),\n      \n      conditionalPanel(condition = \"input.ANFISmainTab == 2\", \n                       wellPanel(\n                         helpText(strong(\"Generate your report: \")),\n                         radioButtons('format', 'Document format', c( 'Word', 'PDF', 'HTML'),\n                                      inline = TRUE),\n                         downloadButton(\"downloadReportANFIS\")),\n                       wellPanel(\n                         helpText(strong(\"Share your report: \")),\n                         bsButton(\"moTrigANFIS\", \"SHARE\", style = \"primary\", type = \"action\"),\n                         bsButton(\"moTrigANFISForum\", \"SHARE to Forum\", style = \"primary\", type = \"action\"),\n                         br(), br(),\n                         bsModal2(\"moANFIS\", \"Share Your Analysis\", trigger = \"moTrigANFIS\",\n                                  helpText(\"This feature allows you to share your analysis to 'Gallery Data'\"),\n                                  textInput(\"titleANFIS\", strong(\"Title :\") , value = \"\"),br(),\n                                  textInput(\"authorANFIS\", strong(\"Author :\") , value = \"\"),br(),\n                                  selectInput(\n                                    inputId = \"categoryANFIS\",\n                                    label = h5(\"Specify category:\"),\n                                    choices = list(\n                                      \"Clustering\" = \"clustering\",\n                                      \"Forecasting\" = \"forecasting\",\n                                      \"Ridge Regression\" = \"ridge\",\n                                      \"Survival\" = \"survival\",\n                                      \"Tobit Regression\" = \"tobit\",\n                                      \"ANFIS Regression\" = \"anfis\"),selectize = FALSE,\n                                    selected = \"anfis\"),br(),\n                                  strong(\"Summary :\"),br(),\n                                  HTML('<textarea id=\"mosummaryANFIS\" rows=\"5\" cols=\"20\", class = \"form-control\"></textarea>'), br(), br(),\n                                  strong(\"Plot :\"),br(),\n                                  selectInput(\"ANFISPlotTypeShare\", label = \"\", choices = c(\"Fitting Plot\", \"Predicting Plot\"), selected = \"Fitting Plot\", multiple = FALSE),\n                                  plotOutput(\"ANFISPlotFunctionShareUI\"),br(),\n                                  #bsAlert(\"modalAlert2\"),\n                                  footer = list(\n                                    bsButton(\"shareANFIS\", \"Submit to Gallery\", style=\"primary\", type = \"action\"),\n                                    tags$button(type = \"button\", class = \"btn btn-default\", 'data-dismiss' = \"modal\", \"Close\")\n                                  )),\n                         bsModal2(\"moANFISForum\", \"Share Your Analysis\", trigger = \"moTrigANFISForum\",\n                                  helpText(\"This feature allows you to share your analysis to the Forum in the ANFIS Subforum.\"),\n                                  #bsAlert(\"modalAlert\"),\n                                  textInput(\"usernameANFISForum\", strong(\"Username :\") , value = \"\"), br(),\n                                  passwordInput(\"passwordANFISForum\", strong(\"Password :\") , value = \"\"),br(),\n                                  textInput(\"subjectANFISForum\", strong(\"Subject :\") , value = \"\"),br(),\n                                  strong(\"Summary :\"),br(),\n                                  HTML('<textarea id=\"mosummaryANFISForum\" rows=\"5\" cols=\"20\", class = \"form-control\"></textarea>'), br(), br(),\n                                  footer = list(\n                                    bsButton(\"shareANFISForum\", \"Submit to Forum\", style=\"primary\", type = \"action\"),\n                                    tags$button(type = \"button\", class = \"btn btn-default\", 'data-dismiss' = \"modal\", \"Close\")\n                                  ))\n                       )\n      ),\n      helpAndReport2('ANFIS','anfis', inclMD2(\"tools/help/anfis.md\"))\n    ),\n    mainPanel(\n      tabsetPanel(\n        id = \"ANFISmainTab\",\n        tabPanel(\"Data Identification\",\n                 tabsetPanel(\n                   id = \"ANFISidentificationTab\",\n                   tabPanel(\"Dependent Variable Plot\", \n                            strong(helpText(\"Dependent Variable Plot\")),\n                            uiOutput(outputId = \"ANFISdepVarPlot\")),\n                   tabPanel(\"Independent Variable Plot\", \n                            strong(helpText(\"Independent Variable Plot(s)\")),\n                            uiOutput(outputId = \"ANFISindepVarPlot\")),\n                   tabPanel(\"Variable Scatterplot\", \n                            strong(helpText(\"Variable Scatterplot\")),\n                            uiOutput(outputId = \"ANFISscatterPlot\"))\n                 ),\n                 value = \"ANFISfirstTab\"),\n        tabPanel(\"Regression\", \n                 tabsetPanel(\n                   id = \"ANFISregressionTab\",\n                   tabPanel(\"Create Model\", uiOutput(outputId = \"ANFIScreate\")),\n                   tabPanel(\"Summary\", uiOutput(outputId = \"ANFISsummary\")),\n                   tabPanel(\"Fitting\", uiOutput(outputId = \"ANFISfitting\")),\n                   tabPanel(\"Predicting\", uiOutput(outputId = \"ANFISpredicting\"))\n                 ),\n                 value = 2),\n        tabPanel(\"K-Fold Cross Validation\", \n                 tabsetPanel(\n                   id = \"ANFISkfoldTab\",\n                   tabPanel(\"K-Fold\", uiOutput(outputId = \"ANFISkfold\"))\n                 ),\n                 value = 3),\n        tabPanel(\"Predict New Data Using Existing Model\",\n                 tabsetPanel(\n                   id = \"ANFISpredictNewData\",\n                   tabPanel(\"Predict New Data\", uiOutput(outputId = \"ANFISviewPND\"))\n                 ),\n                 value = 4)\n      )\n    )    \n  )\n})\n\n#antarmuka pilih parameter\noutput$parameterANFIS <- renderUI({\n  if(is.null(input$ANFISdepVarSelected) || length(input$ANFISindepVarSelected)<2) return()\n  list(\n    wellPanel(\n      helpText(\"ANFIS Parameters:\"),\n      h6(\"Note: All parameters below are set to default\"),\n      numericInput(\"varANFISlingTerms\", \"Number of Linguistic Terms:\", 7, min = 1),\n      numericInput(\"varANFISmaxIter\", \"Maximum Number of Iterations:\", 10, min = 1),\n      numericInput(\"varANFISstepSize\", \"Step Size of Gradient Descent:\", 0.01, min = 0, max = 1, step=0.00001),        \n      selectInput(\"varANFIStypeTnorm\", label = \"Conjunction Operator\", choices = c(\"MIN\", \"PRODUCT\", \"YAGER\"), selected = \"MIN\"),        \n      selectInput(\"varANFIStypeSnorm\", label = \"Disjunction Operator\", choices = c(\"MAX\", \"SUM\", \"YAGER\"), selected = \"MAX\"), \n      selectInput(\"varANFISimplFunc\", label = \"Implication Function\", choices = c(\"DIENES_RESHER\",\"LUKASIEWICZ\",\"ZADEH\", \"GODEL\", \"MIN\"), selected = \"ZADEH\")\n    ))\n})\n\n#identifikasi tab\n#antarmuka pilih variabel dependen\noutput$depVarANFIS <- renderUI({\n  isNum <- \"numeric\" == getdata_class() | \"integer\" == getdata_class()\n  vars <- varnames()[isNum]\n  if(length(vars) == 0) return()\n  selectInput(inputId = \"ANFISdepVarSelected\", label = \"Dependent variable:\", choices = vars, \n              selected = vars[1], multiple = FALSE)\n})\n\n#antarmuka pilih variabel independen\noutput$indepVarANFIS <- renderUI({ \n  if(is.null(input$ANFISdepVarSelected)) return()\n  isNum <- \"numeric\" == getdata_class() | \"integer\" == getdata_class()\n  vars <- varnames()[isNum]\n  vars <- vars[-which(vars == input$ANFISdepVarSelected)]\n  if(length(vars) == 0) return()\n  selectInput(inputId = \"ANFISindepVarSelected\", label = \"Independent variables:\", choices = vars, \n              selected = state_multvar(\"ANFISindepVarSelected\", vars), multiple = TRUE, selectize = FALSE)\n})\n\n#plot variabel dependen\noutput$ANFISdepVarPlot <- renderUI({\n  if(is.null(getANFISdepVar())) {\n    return(\"Please select a dependent variable to see the plot.\")}\n  \n  plotOutput(outputId=\"ANFISdepVarPlotFunction\")\n})\n\n#fungsi plot variabel dependen\noutput$ANFISdepVarPlotFunction <- renderPlot({\n  depVarPlot <- plot(getANFISdepVar(), xlab=\"#observation\", ylab=input$ANFISdepVarSelected, \n                     main=paste(input$ANFISdepVarSelected, \"Plot\", sep = \" \"), type=\"p\")\n  return(depVarPlot)\n})\n\noutput$ANFISindepVarPlot <- renderUI({\n  if(length(input$ANFISindepVarSelected) < 2) {\n    return(\"No independent variable selected. Please select at least two independent variable in order to continue.\")}\n  uiOutput(\"ANFISindepVarPlotFunction\")\n})\n\n#multiple plot untuk variabel independen\n#https://gist.github.com/wch/5436415/\noutput$ANFISindepVarPlotFunction <- renderUI({\n  plot_output_list <- lapply(1:length(input$ANFISindepVarSelected), function(i) {\n    plotname <- paste(\"plot\", i, sep=\"\")\n    plotOutput(plotname, height = 400, width = 881)\n  })\n  do.call(tagList, plot_output_list)\n})\n\nfor (i in 1:max_plots){\n  local({\n    my_i <- i\n    plotname <- paste(\"plot\", my_i, sep=\"\")\n    \n    output[[plotname]] <- renderPlot({\n      suppressWarnings(plot(getANFISindepVar()[,my_i], xlab=\"#observation\", ylab=as.character(input$ANFISindepVarSelected[my_i]), \n                            main=paste(as.character(input$ANFISindepVarSelected[my_i]), \"Plot\", sep = \" \"), type=\"p\"))\n    })\n  })\n}\n\n#scatterplot\noutput$ANFISscatterPlot <- renderUI({\n  if(is.null(getANFISdepVar()) || length(input$ANFISindepVarSelected) < 2) {\n    return(\"No independent variable selected. Please select at least two independent variable in order to continue.\")}\n  plotOutput(outputId=\"ANFISscatterPlotFunction\")\n})\n\n#fungsi scatterplot\noutput$ANFISscatterPlotFunction <- renderPlot({\n  formula <- paste(\"~\", input$ANFISdepVarSelected, \"+\", paste(input$ANFISindepVarSelected, collapse = \"+\"))\n  formula <- as.formula(formula)\n  scatterPlot <- pairs(formula, data=getTheData(), lower.panel=panel.smooth, upper.panel=panel.cor, diag.panel = panel.hist, pch = 20, main=\" Scatterplot Matrix\")\n  return(scatterPlot)\n})\n\n#fungsi tambahan scatterplot (korelasi) dari R Graphic Cookbook\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...){\n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(0, 1, 0, 1))\n  r <- abs(cor(x, y))\n  txt <- format(c(r, 0.123456789), digits=digits)[1]\n  txt <- paste(prefix, txt, sep=\"\")\n  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * r)\n}\n\n#fungsi tambahan scatterplot (histogram) dari R Graphic Cookbook\npanel.hist <- function(x, ...){\n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(usr[1:2], 0, 1.5) )\n  h <- hist(x, plot = FALSE)\n  breaks <- h$breaks; nB <- length(breaks)\n  y <- h$counts; y <- y/max(y)\n  rect(breaks[-nB], 0, breaks[-1], y, col = \"white\", ...)\n}\n\n#regression tab\noutput$ANFIScreate <- renderUI({\n  if(is.null(getANFISdepVar()) || length(input$ANFISindepVarSelected) < 2) {\n    return(list(\n      strong(helpText(\"Create Model\")),\n      helpText(\"No independent variable selected. Please select at least two independent variable in order to continue.\")\n    ))}\n  list(strong(helpText(\"Create Model\")),\n       helpText(\"This function allows you to generate the model by creating fuzzy IF-THEN rules from training data.\"),\n       helpText(\"The first thing you have to do is to choose the range from your \", input$datasets ,\" data to be used as data training.\"),\n       helpText(\"By default, training data and testing data are set with ratio 3:1.\"),\n       sliderInput(\"fuzzynumber_datatraining\", label = \"Select range data:\", min = 1, max = as.numeric(getJumlahData()), value = c(1,as.numeric(jumlah3per4Data())), width = \"80%\"),\n       br(),\n       helpText(\"Then you can tune its parameters in the sidebar.\"),\n       helpText(\"After that, you can proceed to start learning using learn button below.\"),\n       checkboxInput(\"seedcheck\",\"Set Seed\",value = TRUE),\n       fluidRow(column(width=2, textInput(\"seednum\", NULL, value = \"1\"))),\n       actionButton(inputId = \"learnButton\", icon = icon(\"fa fa-spinner\"), label = \"Start Learning\"),\n       br(), br(),\n       uiOutput(outputId = \"learn_button_activator\")\n  )\n})\n\n#fungsi bantuan learn button\noutput$learn_button_activator <- renderUI({  \n  input$learnButton\n  isolate({\n    if(input$learnButton == 0 || is.null(input$learnButton)){return(list())}\n    else{\n      print(\"masuk activator\")\n      doLearnFuzzy()\n      return(list())\n    }\n  })\n})\n\n#summary\n#antarmuka summary\noutput$ANFISsummary <- renderUI({\n  if(length(input$ANFISindepVarSelected) < 2){\n    print(\"masuk if\")\n    return(list(\n      strong(helpText(\"Summary\")),\n      helpText(\"No independent variable selected. Please select at least two independent variable in order to continue.\")\n    ))\n  }\n  else if(valuesANFIS$learnButton == 0){\n    print(\"masuk if bawah\")\n    return(list(\n      strong(helpText(\"Summary\")),\n      helpText(\"No learning process had been done. Please go back to Create Model tab and press Start Learning.\")\n    ))\n  }\n  else{print(\"masuk else\")\n    uiOutput(\"ANFISsummaryUI\")}\n})\n\noutput$ANFISsummaryUI <- renderUI({\n  print(\"masuk else bawah\")\n  return(list(\n    strong(helpText(\"Summary\")),\n    helpText(\"Summary of the model:\"),\n    fluidRow(\n      column(width=6,\n             helpText(\"The Name of Model: \", textOutput(\"summary_modelname\")),\n             helpText(\"Model was Trained Using: \", textOutput(\"summary_modeltype\")),\n             helpText(\"The Names of Attributes: \", textOutput(\"summary_variableattr\")),br(),br(),br(),\n             helpText(\"The Interval of Training Data:\"),\n             tableOutput(\"summary_range_ori\")),\n      column(width=6,\n             helpText(\"Type of Membership Functions: \", textOutput(\"summary_mffunction\")),\n             helpText(\"Type of T-norm Method:\", textOutput(\"summary_tnormmethod\")),\n             helpText(\"Type of S-norm Method:\", textOutput(\"summary_snormmethod\")),\n             helpText(\"Type of Implication Function: :\", textOutput(\"summary_impfunc\")),\n             helpText(\"Download This Model:\"),\n             downloadButton(outputId = \"downloadModel\", label = \"Download\"))\n    ),\n    br(),br(),\n    helpText(\"The Plot of Membership Function (normalized):\"),\n    plotOutput(\"fuzzy_plot_membership\"),\n    helpText(\"The Parameter Values of Membership Function on the Input Variable (normalized) :\"),\n    verbatimTextOutput(\"summary_varinpmf\"),\n    helpText(\"The Fuzzy IF-THEN Rules:\"),\n    tableOutput(\"summary_ifthenrules\"),\n    helpText(\"The Linear Equations on Consequent Parts of Fuzzy IF-THEN Rules:\"),\n    tableOutput(\"summary_ifthenrulesconsequent\")\n  ))\n})\n\n#download handler untuk model\noutput$downloadModel <- downloadHandler(\n  filename = function(){\n    paste(input$datasets, \"model\", \"frbsPMML\", sep = \".\")\n  },\n  content = function(file){\n    out <- write.frbsPMML(frbsPMML(doLearnFuzzy(), fileName = \"EXAMPLE\"))\n    file.rename(out, file)\n  }\n)\n\n#fungsi summary\noutput$fitting_summary_function <- renderPrint({\n  input$learnButton\n  isolate({\n    return(summary(doLearnFuzzy()))\n  })\n})\n\n#fungsi plot membership\noutput$fuzzy_plot_membership <- renderPlot({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    input$learnButton\n    isolate({\n      plotMF(doLearnFuzzy())\n    })\n  }\n})\n\noutput$summary_varinpmf <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_varinpmf(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_modelname <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_modelname(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_modeltype <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_modeltype(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_variableattr <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_variableattr(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_range_ori <- renderTable({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_range_ori(doLearnFuzzy())\n    return(retval)\n  })\n})\n\noutput$summary_mffunction <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_mffunction(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_tnormmethod <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_tnormmethod(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_snormmethod <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_snormmethod(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_impfunc <- renderPrint({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_impfunc(doLearnFuzzy())\n    return(cat(retval))\n  })\n})\n\noutput$summary_ifthenrules <- renderTable({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_ifthenrules(doLearnFuzzy())\n    bawah <- nrow(retval)\n    samping <- ncol(retval)\n    rule <- matrix(NA, nrow = bawah, ncol = 1)\n    for(i in 1:bawah){\n      rulei <- \"\"\n      for(j in 1:samping){\n        rulei <- paste(rulei,retval[i,j], sep = \" \")\n      }\n      rule[i,] <- rulei\n    }\n    colnames(rule) <- \"Rule\"\n    return(rule)\n  })\n})\n\noutput$summary_ifthenrulesconsequent <- renderTable({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- fsummary_ifthenrulesconsequent(doLearnFuzzy())\n    colnames(retval) <- c(as.character(fsummary_variableattr(doLearnFuzzy())[-length(fsummary_variableattr(doLearnFuzzy()))]), \"Constant\")\n    return(retval)\n  })\n})\n\noutput$summary_rule_data_num <- renderTable({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  input$learnButton\n  isolate({\n    retval <- doLearnFuzzy()$rule.data.num\n    colnames(retval) <- c(as.character(fsummary_variableattr(doLearnFuzzy())))\n    return(retval)\n  })\n})\n\n#fungsi untuk mengembalikan summary varinp mf\n#kembalikan index pemisah varinp mf\ndoPisah <- function(num.labels){\n  matrixIdx <- matrix(NA, 2, length(num.labels))\n  for(i in 1:length(num.labels)){\n    matrixIdx[1, i] <- 1+(num.labels[1,1]*(i-1))\n    matrixIdx[2, i] <- i*num.labels[1,1]\n  }\n  return(matrixIdx)\n}\n\n#kembalikan list varinp mf yang sudah terpisah\npisahVarInpMF <- function(indeksPisah, object){\n  listVarInpMF <- list()\n  for(i in 1:ncol(indeksPisah)){\n    listVarInpMF[[i]] <- object[2:3,indeksPisah[1,i]:indeksPisah[2,i]]\n    rownames(listVarInpMF[[i]]) <- c(\"mean\", \"variance\")\n  }\n  return(listVarInpMF)\n}\n\n#berikan hasil dalam bentuk string\ngiveResultPisahVarInpMF <- function(model){\n  pisahVarInpMF <- pisahVarInpMF(doPisah(model$num.labels), model$varinp.mf)\n  for(i in 1:length(pisahVarInpMF)){\n    print(paste0(\"Parameters for Variable \", model$colnames.var[i]))\n    print(pisahVarInpMF[[i]])\n  }\n}\n\n#output dari varinp mf\nfsummary_varinpmf <- function(model){\n  return(giveResultPisahVarInpMF(model))\n}\n\n#output dari nama model\nfsummary_modelname <- function(model){\n  name <- model$name\n  return(name)\n}\n\n#output dari tipe model\nfsummary_modeltype <- function(model){\n  return(model$method.type)\n}\n\n#output dari nama nama variabel\nfsummary_variableattr <- function(model){\n  return(model$colnames.var)\n}\n\n#output dari range original data\nfsummary_range_ori <- function(model){\n  range <- model$range.data.ori\n  colnames(range) <- model$colnames.var\n  rownames(range) <- c(\"min\", \"max\")\n  return(range)\n}\n\n#output dari tipe mf\nfsummary_mffunction <- function(model){\n  return(model$type.mf)\n}\n\n#output dari t norm method\nfsummary_tnormmethod <- function(model){\n  return(model$type.tnorm)\n}\n\n#output dari s norm method\nfsummary_snormmethod <- function(model){\n  return(model$type.snorm)\n}\n\n#output dari implication function\nfsummary_impfunc <- function(model){\n  return(model$type.implication.func)\n}\n\n#output dari if then rules\nfsummary_ifthenrules <- function(model){\n  return(model$rule)\n}\n\n#output dari bagian konsekuen if then rules\nfsummary_ifthenrulesconsequent <- function(model){\n  return(model$func.tsk)\n}\n\n#antarmuka anfis fitting\noutput$ANFISfitting <- renderUI({\n  if(length(input$ANFISindepVarSelected) < 2){\n    return(list(\n      strong(helpText(\"Predict the data training using model.\")),\n      helpText(\"No independent variable selected. Please select at least two independent variable in order to continue.\")\n    ))\n  }\n  else if(valuesANFIS$learnButton == 0){\n    return(list(\n      strong(helpText(\"Predict the data training using model.\")),\n      helpText(\"No learning process had been done. Please go back to Create Model tab and press Start Learning.\")\n    ))\n  }\n  return(uiOutput(\"ANFISfittingfunction\"))\n})\n\noutput$ANFISfittingfunction <- renderUI({\n  return(list(\n    strong(helpText(\"Predict the data training using model.\")),\n    helpText(\"Number of data training observation: \", getJumlahDataTraining()),\n    uiOutput(outputId = \"fuzzy_fitting_plot\"),\n    bsCollapse(id = \"fitting_collapse\", multiple = TRUE, open = NULL,\n               bsCollapsePanel(\"Residual\",\n                               uiOutput(outputId = \"calculate_fitting_error\"),\n                               value = \"colfiterr\"),\n               bsCollapsePanel(\"Predicted vs Real Value\",\n                               uiOutput(outputId = \"compare_fitting\"),\n                               value = \"colfitreg\"))))\n})\n\n#fitting plot\noutput$fuzzy_fitting_plot <- renderUI({\n  if(valuesANFIS$learnButton == 0) {\n    return()}\n  else{\n    return(plotOutput(outputId=\"fuzzy_fitting_plot_function\"))\n  }\n})\n\n#fungsi fitting plot\noutput$fuzzy_fitting_plot_function <- renderPlot({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    print(Rfuzzy_fitting_plot_function())\n  }\n})\n\nRfuzzy_fitting_plot_function <- reactive({\n  data.train <- getDataTraining()\n  depVar <- getJumlahKolom()\n  \n  #memprediksi keluaran dari data training\n  res.fit <- getPrediksiDataTraining()\n  \n  #membandingkan data hasil simulasi dengan data sesungguhnya\n  x1 <- seq(from = 1, to = getJumlahDataTraining())\n  y.real <- data.train[, depVar]\n  y.pred <- res.fit\n  df <- data.frame(x1, y.real, y.pred)\n  \n  g <- ggplot(df, aes(x1))\n  g <- g + geom_line(aes(y=y.real), colour=\"red\")\n  g <- g + geom_line(aes(y=y.pred), colour=\"blue\")\n  g <- g + ylab(\"y\") + xlab(\"observation\")\n  g <- g + ggtitle('Training data (red) vs Sim Result (blue)')\n  g <- g + theme(plot.title = element_text(size=15, face=\"bold\", vjust=2))\n  #return(g)\n})\n\n#fitting error\noutput$calculate_fitting_error <- renderUI({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    return(dataTableOutput(outputId = \"calculate_fitting_error_function\"))\n  }\n})\n\n#fungsi fitting error\noutput$calculate_fitting_error_function <- renderDataTable({\n  round(Rcalculate_fitting_error_function(), 3)\n}, options = list(dom = 't'))\n\nRcalculate_fitting_error_function <- reactive({\n  data.train <- getDataTraining()\n  depVar <- getJumlahKolom()\n  \n  #memprediksi keluaran dari data training\n  res.fit <- getPrediksiDataTraining()\n  \n  y.pred <- res.fit\n  y.real <- data.train[,depVar]\n  \n  residuals <- (y.real - y.pred)\n  MSE <- getMeanSquareErr(y.real, y.pred)\n  RMSE <- getRMeanSquareErr(y.real, y.pred)\n  SMAPE <- getSMAPE(y.real, y.pred)\n  err <- cbind(MSE, RMSE, SMAPE)\n  names(err) <- c(\"MSE\", \"RMSE\", \"SMAPE\")\n  return(err)\n})\n\n#bandingkan fitting\noutput$compare_fitting <- renderUI({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    return(dataTableOutput(outputId = \"compare_fitting_function\"))\n  }\n})\n\n#fungsi bandingkan fitting\noutput$compare_fitting_function <- renderDataTable({\n  Rcompare_fitting_function()\n}, options = list(pageLength=10, searching = FALSE))\n\nRcompare_fitting_function <- reactive({\n  data.train <- getDataTraining()\n  depVar <- getJumlahKolom()\n  \n  #memprediksi keluaran dari data training\n  res.fit <- getPrediksiDataTraining()\n  \n  obs <- seq(from = 1, to = getJumlahDataTraining())\n  y.pred <- round(res.fit, digits = 2)\n  y.real <- data.train[,depVar]\n  err <- round(y.real-y.pred, digits = 4)\n  bench <- cbind(obs, y.pred, y.real, err)\n  colnames(bench) <- c(\"#Obs.\", \"Predicted value\", \"Real value\", \"Error\")\n  return(bench)\n})\n\n#antarmuka predicting\noutput$ANFISpredicting <- renderUI({\n  if(length(input$ANFISindepVarSelected) < 2){\n    return(list(\n      strong(helpText(\"Predict the data testing using model.\")),\n      helpText(\"No independent variable selected. Please select at least two independent variable in order to continue.\")\n    ))\n  }\n  else if(valuesANFIS$learnButton == 0){\n    return(list(\n      strong(helpText(\"Predict the data training using model.\")),\n      helpText(\"No learning process had been done. Please go back to Create Model tab and press Start Learning.\")\n    ))\n  }\n  return(uiOutput(\"ANFISpredictingfunction\"))\n})\n\noutput$ANFISpredictingfunction <- renderUI({\n  return(list(\n    strong(helpText(\"Predict the data testing using model\")),\n    helpText(\"Number of data testing observation: \", getJumlahDataTesting()),\n    uiOutput(outputId = \"fuzzy_predicting_plot\"),\n    bsCollapse(id = \"predicting_collapse\", multiple = TRUE, open = NULL,\n               bsCollapsePanel(\"Residual\",\n                               uiOutput(outputId = \"calculate_predicting_error\"),\n                               value = \"colprederr\"),\n               bsCollapsePanel(\"Predicted vs Real Value\",\n                               uiOutput(outputId = \"compare_predicting\"),\n                               value = \"colpredreg\"))))\n})\n\n#plot predicting\noutput$fuzzy_predicting_plot <- renderUI({\n  if(valuesANFIS$learnButton == 0) {\n    return()}\n  else{\n    return(plotOutput(outputId=\"fuzzy_predicting_plot_function\"))\n  }\n})\n\n#fungsi plot predicting\noutput$fuzzy_predicting_plot_function <- renderPlot({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    print(Rfuzzy_predicting_plot_function())\n  }\n})\n\nRfuzzy_predicting_plot_function <- reactive({\n  real.val <- getRealValue()\n  \n  #memprediksi keluaran dari data testing\n  res.test <- getPrediksiDataTesting()\n  \n  #membandingkan data hasil simulasi dengan data sesungguhnya\n  x2 <- seq(from = 1, to = getJumlahDataTesting())\n  y.real <- real.val\n  y.pred <- res.test\n  df <- data.frame(x2, y.real, y.pred)\n  \n  g <- ggplot(df, aes(x2))\n  g <- g + geom_line(aes(y=y.real), colour=\"red\")\n  g <- g + geom_line(aes(y=y.pred), colour=\"blue\")\n  g <- g + ylab(\"y\") + xlab(\"observation\")\n  g <- g + ggtitle('Real data (red) vs Sim Result (blue)')\n  g <- g + theme(plot.title = element_text(size=15, face=\"bold\", vjust=2))\n  #return(g)\n})\n\n#error predicting\noutput$calculate_predicting_error <- renderUI({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    return(dataTableOutput(outputId = \"calculate_predicting_error_function\"))\n  }\n})\n\n#fungsi error predicting\noutput$calculate_predicting_error_function <- renderDataTable({\n  round(Rcalculate_predicting_error_function(),3)\n}, options = list(dom = 't'))\n\nRcalculate_predicting_error_function <- reactive({\n  real.val <- getRealValue()\n  \n  #memprediksi keluaran dari data testing\n  res.test <- getPrediksiDataTesting()\n  \n  y.pred <- res.test\n  y.real <- real.val\n  \n  residuals <- (y.real - y.pred)\n  MSE <- getMeanSquareErr(y.real, y.pred)\n  RMSE <- getRMeanSquareErr(y.real, y.pred)\n  SMAPE <- getSMAPE(y.real, y.pred)\n  err <- cbind(MSE, RMSE, SMAPE)\n  names(err) <- c(\"MSE\", \"RMSE\", \"SMAPE\")\n  return(err)\n})\n\n#bandingkan predicting\noutput$compare_predicting <- renderUI({\n  if(valuesANFIS$learnButton == 0){\n    return()\n  }\n  else{\n    return(dataTableOutput(outputId = \"compare_predicting_function\"))\n  }\n})\n\n#fungsi bandingkan predicting\noutput$compare_predicting_function <- renderDataTable({\n  Rcompare_predicting_function()\n}, options = list(pageLength=10, searching = FALSE))\n\nRcompare_predicting_function <- reactive({\n  real.val <- getRealValue()\n  \n  #memprediksi keluaran dari data testing\n  res.test <- getPrediksiDataTesting()\n  \n  obs <- seq(from = 1, to = getJumlahDataTesting())\n  y.pred <- round(res.test, digits = 2)\n  y.real <- real.val\n  err <- round(y.real-y.pred, digits = 4)\n  bench <- cbind(obs, y.pred, y.real, err)\n  colnames(bench) <- c(\"#Obs.\", \"Predicted value\", \"Real value\", \"Error\")\n  return(bench)\n})\n\n#kfold\n#antarmuka k fold cross validation\noutput$ANFISkfold <- renderUI({\n  if(is.null(getANFISdepVar()) || length(input$ANFISindepVarSelected) < 2) {\n    return(list(strong(helpText(\"K-Fold Cross Validation\")),\n                helpText(\"No independent variable selected. Please select at least two independent variable in order to continue.\")))}\n  list(\n    strong(helpText(\"K-Fold Cross Validation\")),\n    helpText(\"This function allows you to do k-fold cross validation.\"),\n    helpText(\"K-fold cross validation is a statistical technique used for estimating prediction error. In k-fold cross-validation, the original sample is randomly partitioned into k equal sized subsamples.\"),\n    helpText(\"Of the k subsamples, a single subsample is retained as the validation data for testing the model, \n             and the remaining k - 1 subsamples are used as training data. The cross-validation process is then repeated k times (the folds), with each of the k subsamples used exactly once as the validation data.\"),\n    selectInput(inputId = \"numberofk\",label = \"Select k:\", choices = 2:(getJumlahData()),selected = 10, selectize = FALSE), br(),\n    actionButton(inputId = \"learnKFoldButton\", icon = icon(\"fa fa-spinner\"),  label = \"Start K-Fold Cross Validation\"), br(), br(),\n    uiOutput(outputId = \"errorKFoldPanel\")\n    )\n})\n\n#panel error k fold\noutput$errorKFoldPanel <- renderUI({\n  input$learnKFoldButton\n  isolate({\n    if(input$learnKFoldButton==0){return()}\n    else{\n      doFuzzyKFold()\n      return(list(\n        dataTableOutput(outputId = \"errorKFoldTable\")\n      ))\n    }\n  })\n})\n\n#tabel error k fold\noutput$errorKFoldTable <- renderDataTable({\n  input$learnKFoldButton\n  isolate({\n    if(input$learnKFoldButton == 0 || is.null(input$learnKFoldButton)){\n      tabelBantuan()\n    }\n    else{\n      doFuzzyKFold()\n    }\n  })\n}, options = list(pageLength=10, searching = FALSE))\n\n#tabel bantuan error k fold\ntabelBantuan <- renderDataTable({\n  tabel <- matrix(NA, 1, 4)\n  names(tabel) <- c(\"#K\", \"MSE\", \"RMSE\", \"SMAPE\")\n  return(tabel)\n})\n\n#fungsi-fungsi Shiny\n\n#mengambil data variabel dependen\ngetANFISdepVar <- reactive({\n  if(is.null(input$ANFISdepVarSelected)) return(NULL)\n  else {\n    theData <- getdata()\n    return(theData[,as.character(input$ANFISdepVarSelected)])}\n})\n\n#mengambil data variabel independen\ngetANFISindepVar <- reactive({\n  if(is.null(input$ANFISdepVarSelected) || length(input$ANFISindepVarSelected) < 2) return(NULL)\n  else {\n    valuesANFIS$learnButton <- 0\n    theData <- getdata()\n    return(theData[,as.character(input$ANFISindepVarSelected)])}\n})\n\n#mengambil data\ngetTheData <- reactive({\n  if(length(input$ANFISindepVarSelected) < 2){\n    return(NULL)\n  }  \n  theData <-data.frame(getANFISindepVar(),matrix(data = getANFISdepVar(), ncol = 1))\n  names(theData)[getJumlahKolom()]<-paste(input$ANFISdepVarSelected)\n  print(\"dimensi data\")\n  print(dim(theData))\n  print(\"nama variabel\")\n  print(names(theData))\n  print(\"kelas data\")\n  print(class(theData))\n  return(theData)\n})\n\n#mengambil banyak kolom\ngetJumlahKolom <- reactive({\n  return(length(input$ANFISindepVarSelected) + 1)\n})\n\n#mengambil jumlah data\ngetJumlahData <- reactive({\n  return(length(getTheData()[,1]))\n})\n\njumlah3per4Data <- reactive({\n  return(getJumlahData()*3/4)\n})\n\n#fungsi learning\ndoLearnFuzzy <- reactive({\n  input$learnButton\n  isolate({\n    if(length(input$ANFISindepVarSelected) < 2){\n      return(NULL)\n    }\n    if(input$seedcheck == TRUE){\n      set.seed(input$seednum)\n    }\n    data.train <- getDataTraining()\n    range.data <- getRangeDataTraining()\n    method.type <- \"ANFIS\"\n    \n    ## generate fuzzy model\n    object <- frbs.learn(data.train, range.data, method.type, getcontrol())\n    return(object)\n  })\n})\n\n#set nilai untuk pengecekan kondisi ketika button sudah diklik\nobserveEvent(input$learnButton, {\n  print(\"masuk observer\")\n  doLearnFuzzy()\n  valuesANFIS$learnButton <- 1\n})\n\n#mengambil parameter\ngetcontrol <- reactive({\n  ## set the method and its parameters\n  num.labels <- input$varANFISlingTerms\n  max.iter <- input$varANFISmaxIter\n  step.size <- input$varANFISstepSize\n  type.tnorm <- input$varANFIStypeTnorm\n  type.snorm <- input$varANFIStypeSnorm\n  type.implication.func <- input$varANFISimplFunc\n  \n  control <- list(\n    num.labels = num.labels, \n    max.iter = max.iter, \n    step.size = step.size, \n    type.tnorm = type.tnorm,\n    type.snorm = type.snorm, \n    type.implication.func = type.implication.func, \n    name=input$datasets)\n  \n  return(control)\n})\n\n#fungsi k fold cross validation\ndoFuzzyKFold <- reactive({\n  #ambil parameter\n  k <- as.numeric(input$numberofk)\n  method.type <- \"ANFIS\"\n  control <- getcontrol()\n  \n  #scramble data\n  dataKFold <- getTheData()[sample(nrow(getTheData())),]\n  #buat fold dengan menambahkan kolom bantuan\n  folds <- cut(seq(1, nrow(getTheData())), breaks = k, labels = FALSE)\n  dataKFold <- cbind(dataKFold, folds)\n  indeksFolds <- ncol(getTheData())+1\n  lastCol <- ncol(getTheData())\n  errMat <- matrix(NA, nrow = k+1, ncol = 3)\n  increment <- 1/k\n  \n  withProgress(message = 'K Fold CV in Progress', detail = \"Fold done: 0\", value = increment, {\n    for(i in 1:k){\n      data.train <- dataKFold[-which(folds==i,arr.ind=TRUE),-indeksFolds]\n      data.test <- dataKFold[which(folds==i,arr.ind=TRUE),-c(indeksFolds-1,indeksFolds)]\n      real.value <- matrix(dataKFold[which(folds==i,arr.ind=TRUE),lastCol], ncol=1)\n      range.data <- as.matrix(rbind(apply(data.train, 2, min), apply(data.train, 2, max)))\n      objectKFold <- frbs.learn(data.train, range.data, method.type, control)\n      res.test <- predict(objectKFold, data.test)\n      residual <- (real.value - res.test)\n      errMat[i,1] <- mean(residual^2)\n      errMat[i,2] <- sqrt(mean(residual^2))\n      errMat[i,3] <- mean(abs(real.value - res.test)/((abs(real.value) + abs(res.test))/2))*100\n      incProgress(increment, detail = paste0(\"Fold done: \", i))\n    }\n    #setProgress(1)\n  })\n  errMat[k+1,1] <- mean(errMat[c(1:k),1])\n  errMat[k+1,2] <- mean(errMat[c(1:k),2])\n  errMat[k+1,3] <- mean(errMat[c(1:k),3])\n  errMat <- round(errMat, 3)\n  bindThis <- matrix(c(c(1:k),\"MEAN\"), ncol = 1)\n  errMat <- cbind(bindThis, errMat)\n  colnames(errMat) <- c(\"#K\", \"MSE\", \"RMSE\", \"SMAPE\")\n  return(errMat)\n})\n\n#mengambil prediksi data training melalui model\ngetPrediksiDataTraining <- reactive({\n  input$learnButton\n  isolate({\n    data.fit <- getDataFit()\n    object <- doLearnFuzzy()\n    \n    #memprediksi keluaran dari data training\n    res.fit <- predict(object, data.fit)\n    return(res.fit)\n  })\n})\n\n#mengambil prediksi data testing melalui model\ngetPrediksiDataTesting <- reactive({\n  input$learnButton\n  isolate({\n    data.test <- getDataTesting()\n    object <- doLearnFuzzy()\n    \n    #memprediksi keluaran dari data testing\n    res.test <- predict(object, data.test)\n    return(res.test)\n  })\n})\n\n#mengambil data training pilihan user\ngetDataTraining <- reactive({\n  return(getTheData()[getFirstNumIndex() : getSecondNumIndex(), ])\n})\n\n#mengambil jumlah data training\ngetJumlahDataTraining <- reactive({\n  return(length(getDataTraining()[,1]))\n})\n\n#mengambil data fit (data training tanpa real value)\ngetDataFit <- reactive({\n  return(getDataTraining()[,-(getJumlahKolom())])\n})\n\n#mengambil data testing pilihan user\ngetDataTesting <- reactive({\n  return(getTheData()[-(getFirstNumIndex() : getSecondNumIndex()), -(getJumlahKolom())])\n})\n\n#mengambil jumlah data testing\ngetJumlahDataTesting <- reactive({\n  return(length(getDataTesting()[,1]))\n})\n\n#mengambil real value dari data testing\ngetRealValue <- reactive({\n  return(matrix(getTheData()[-(getFirstNumIndex() : getSecondNumIndex()), getJumlahKolom()], ncol = 1))\n})\n\n#mengambil range data training\ngetRangeDataTraining <- reactive({\n  return(as.matrix(rbind(apply(getDataTraining(), 2, min), apply(getDataTraining(), 2, max))))\n})\n\n#mendapatkan nilai MSE\ngetMeanSquareErr <- function(y.real, y.pred){\n  y.real <- as.numeric(y.real)\n  y.pred <- as.numeric(y.pred)\n  res <- y.real - y.pred\n  return(mean(res*res))\n}\n\n#mendapatkan nilai RMSE\ngetRMeanSquareErr <- function(y.real, y.pred){\n  y.real <- as.numeric(y.real)\n  y.pred <- as.numeric(y.pred)\n  res <- y.real - y.pred\n  return(sqrt(mean(res*res)))\n}\n\n#mendapatkan nilai SMAPE\ngetSMAPE <-function(y.real, y.pred){\n  y.real <- as.numeric(y.real)\n  y.pred <- as.numeric(y.pred)\n  return(mean(abs(y.real - y.pred)/((abs(y.real) + abs(y.pred))/2))*100)\n}\n\n#mengambil index pertama dari data training\ngetFirstNumIndex <- reactive({\n  return(input$fuzzynumber_datatraining[1])\n})\n\n#mengambil index kedua dari data training\ngetSecondNumIndex <- reactive({\n  return(input$fuzzynumber_datatraining[2])\n})\n\n##########\n#sharing\n\ngetANFISfitPlotForSharing <- function(){\n  thePlot <- Rfuzzy_fitting_plot_function()\n  return(thePlot)\n}\n\ngetANFISpredPlotForSharing <- function(){\n  if(getJumlahDataTesting()==0){\n    return()\n  }\n  thePlot <- Rfuzzy_predicting_plot_function()\n  return(thePlot)\n}\n\ngetANFISResidualForSharingF <- function(){\n  Rcalculate_fitting_error_function()\n}\n\ngetANFISResidualForSharingP <- function(){\n  if(getJumlahDataTesting()==0){\n    return()\n  }\n  Rcalculate_predicting_error_function()\n}\n\ngetANFISRealvsPredF <- function(){\n  Rcompare_fitting_function()\n}\n\ngetANFISRealvsPredP <- function(){\n  if(getJumlahDataTesting()==0){\n    return()\n  }\n  Rcompare_predicting_function()\n}\n\n#download report\noutput$downloadReportANFIS <- downloadHandler(\n  filename = function() {\n    paste('Regression Report', sep = '.', switch(\n      input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'\n    ))\n  },\n  \n  content = function(file) {\n    src <- normalizePath('nf-report.Rmd')\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n    owd <- setwd(tempdir())\n    on.exit(setwd(owd))\n    file.copy(src, 'nf-report.Rmd')\n    \n    # library(rmarkdown)\n    out <- render('nf-report.Rmd', switch(\n      input$format,\n      PDF = pdf_document(), HTML = html_document(), Word = word_document()\n    ))\n    file.rename(out, file)\n  }\n)\n\n###predict new data using existing model\noutput$ANFISviewPND <- renderUI({\n  if(valuesANFIS$counter == 1 || valuesANFIS$counter == 0){\n    return(list(uiOutput(\"PND1\")))\n  }\n  else if(valuesANFIS$counter == 2){\n    return(list(uiOutput(\"PND2\")))\n  }\n  else if(valuesANFIS$counter == 3){\n    return(list(uiOutput(\"PND3\")))\n  }\n  else{\n    return(list(uiOutput(\"PND1\")))\n  }\n})\n\n#observer untuk file yang diupload\nobserve({\n  input$uploadedModel\n  session$sendCustomMessage(type = \"resetFileInputHandler\", 'uploadedModel')\n})\n\nobserve({\n  input$uploadedDataTest\n  session$sendCustomMessage(type = \"resetFileInputHandler\", 'uploadedDataTest')\n})\n\n#event observer, mengecek button mana yang diklik user\nobserveEvent(input$butt1, {\n  valuesANFIS$counter <- 2\n})\n\nobserveEvent(input$butt2, {\n  valuesANFIS$counter <- 3\n})\n\nobserveEvent(input$butt3, {\n  valuesANFIS$counter <- 1\n})\n\nobserveEvent(input$butt4, {\n  valuesANFIS$counter <- 1\n})\n\nobserveEvent(input$butt5, {\n  valuesANFIS$counter <- 1\n})\n\nobserveEvent(input$butt6, {\n  valuesANFIS$counter <- 2\n})\n\noutput$PND1 <- renderUI({\n  return(list(br(),\n              fluidRow(\n                column(width = 9),\n                column(width = 4, actionLink(\"butt1\", label = \"Next : Upload the New Data >>\"))), br(),\n              strong(helpText(\"STEP 1 OF 3: UPLOAD THE MODEL\")),\n              fluidRow(column(width=4,\n                              #helpText(\"Upload Model:\"),\n                              fileInput(inputId = \"uploadedModel\", label = \"\", accept = \".frbsPMML\")),\n                       column(width=8,\n                              helpText(\"This function allows you to predict the regression outcome from new data using your previously-built model.\"),\n                              helpText(\"What is meant by \\'model\\' here is the model that you get from doing some learning about your data in the first place. It MUST be saved in PMML format. And in this case, it must be frbsPMML format.\"),\n                              helpText(\"If you didn\\'t have that kind of model, we suggest you create the model first by doing some learning the regression section alongside this section tab.\"))),\n              uiOutput(outputId = \"summary_frbspmml\")\n  ))\n})\n\n#fungsi balikan summary untuk frbsPMML\noutput$summary_frbspmml <- renderUI({\n  if(is.null(dataFRBSpmml())){\n    return()\n  }\n  else{\n    return(list(bsCollapse(id = \"colModPND\", open = \"colModPND1\",\n                           bsCollapsePanel(\"Summary of the Model\", value = \"colModPND1\", uiOutput(\"summary_frbspmml_function\")))))\n  }\n})\n\n#fungsi read file frbsPMML\ndataFRBSpmml <- reactive({\n  filepmml <- input$uploadedModel\n  if(is.null(filepmml)){\n    return()\n  }\n  else{\n    return(read.frbsPMML(filepmml$datapath))\n  }\n})\n\n#fungsi summary pmml\noutput$summary_frbspmml_function <- renderUI({\n  return(list(\n    #h4(\"SUMMARY\"),br(),\n    fluidRow(\n      column(width=6,\n             helpText(\"The Name of Model: \", textOutput(\"psummary_modelname\")),\n             helpText(\"Model was Trained Using: \", textOutput(\"psummary_modeltype\")),\n             helpText(\"The Names of Attributes: \", textOutput(\"psummary_variableattr\")),\n             helpText(\"The Interval of Training Data:\"),\n             tableOutput(\"psummary_range_ori\")),\n      column(width=6,\n             helpText(\"Type of Membership Functions: \", textOutput(\"psummary_mffunction\")),\n             helpText(\"Type of T-norm Method:\", textOutput(\"psummary_tnormmethod\")),\n             helpText(\"Type of S-norm Method:\", textOutput(\"psummary_snormmethod\")),\n             helpText(\"Type of Implication Function: :\", textOutput(\"psummary_impfunc\"))\n      )),\n    br(),\n    helpText(\"The Parameter Values of Membership Function on the Input Variable (normalized) :\"),\n    verbatimTextOutput(\"psummary_varinpmf\"),\n    helpText(\"The Fuzzy IF-THEN Rules:\"),\n    verbatimTextOutput(\"psummary_ifthenrules\"),\n    helpText(\"The Linear Equations on Consequent Parts of Fuzzy IF-THEN Rules:\"),\n    verbatimTextOutput(\"psummary_ifthenrulesconsequent\")\n  ))\n})\n\noutput$psummary_varinpmf <- renderPrint({\n  retval <- fsummary_varinpmf(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_modelname <- renderPrint({\n  retval <- fsummary_modelname(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_modeltype <- renderPrint({\n  retval <- fsummary_modeltype(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_variableattr <- renderPrint({\n  retval <- fsummary_variableattr(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_range_ori <- renderTable({\n  retval <- fsummary_range_ori(dataFRBSpmml())\n  return(retval)\n})\n\noutput$psummary_mffunction <- renderPrint({\n  retval <- \"Gaussian\"\n  return(cat(retval))\n})\n\noutput$psummary_tnormmethod <- renderPrint({\n  retval <- fsummary_tnormmethod(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_snormmethod <- renderPrint({\n  retval <- fsummary_snormmethod(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_impfunc <- renderPrint({\n  retval <- fsummary_impfunc(dataFRBSpmml())\n  return(cat(retval))\n})\n\noutput$psummary_ifthenrules <- renderPrint({\n  retval <- fsummary_ifthenrules(dataFRBSpmml())\n  return(retval)\n})\n\noutput$psummary_ifthenrulesconsequent <- renderPrint({\n  retval <- fsummary_ifthenrulesconsequent(dataFRBSpmml())\n  return(retval)\n})\n\noutput$PND2 <- renderUI({\n  if(is.null(dataFRBSpmml())){\n    return(list(br(),\n                fluidRow(column(width = 4, actionLink(\"butt5\", label = \"<< Back: Upload the Model\"))),\n                helpText(\"You haven\\'t uploaded any model. Please go back to the previous tab and upload the model first.\"),\n                helpText(\"What is meant by \\'model\\' here is the model that you get from doing some learning about your data in the first place. It MUST be saved in PMML format. And in this case, it must be frbsPMML format.\"),\n                helpText(\"If you didn\\'t have that kind of model, we suggest you create the model first by doing some learning the regression section alongside this section tab.\")\n    ))\n  }\n  else{    \n    return(list(br(),\n                fluidRow(\n                  column(width = 4, actionLink(\"butt4\", label = \"<< Back: Upload the Model\")),\n                  column(width = 6),\n                  column(width = 4, actionLink(\"butt2\", label = \"Next: Predicted Data >>\"))), br(),\n                strong(helpText(\"STEP 2 OF 3: UPLOAD THE DATA\")),\n                fluidRow(\n                  column(width = 4,\n                         #strong(helpText(\"UPLOAD THE DATA\")),\n                         fileInput(inputId = \"uploadedDataTest\", label = \"\", accept = \".csv\")),\n                  column(width = 8,\n                         helpText(\"Now you can upload your new data, data which are going to be predicted.\"),\n                         helpText(\"Please be advised to upload data that corresponding with the model. Otherwise, the predicting function won\\'t work as expected.\"),\n                         helpText(\"PS: In the meantime, we only support uploading data in csv format with \\';\\' separator.\")\n                  )),\n                uiOutput(\"tabelDataBaruUntukPrediksi\")))\n  }\n})\n\n#fungsi read file data test baru\ndataTestBaru <- reactive({\n  fileDataTestBaru <- input$uploadedDataTest\n  if(is.null(fileDataTestBaru)){\n    return()\n  }\n  else{\n    return(read.table(file = fileDataTestBaru$datapath, header = TRUE, sep = \";\"))\n  }\n})\n\n#ui tampilan ketika sudah ada data yg diunggah\noutput$tabelDataBaruUntukPrediksi <- renderUI({\n  if(is.null(dataTestBaru())){\n    return()\n  }\n  else{\n    return(list(\n      bsCollapse(id = \"colDatPND\", open = \"colDatPND1\",\n                 bsCollapsePanel(\"To-be-predicted Data\", value = \"colDatPND1\", dataTableOutput(\"tabelDataBaruUntukPrediksiFunction\")))\n    ))}\n})\n\n#fungsi tabel data baru untuk prediksi\noutput$tabelDataBaruUntukPrediksiFunction <- renderDataTable({\n  if(is.null(dataTestBaru())){\n    return()\n  }\n  dataTestBaru()\n}, options = list(pageLength=15, searching = FALSE))\n\noutput$PND3 <- renderUI({\n  if(is.null(dataFRBSpmml()) || is.null(dataTestBaru())){\n    return(list(br(),\n                fluidRow(column(width = 4, actionLink(\"butt6\", label = \"<< Back: Upload the New Data\"))),\n                helpText(\"You haven't upload your new data which are going to be predicted.\"),\n                helpText(\"Please go back to the previous tab to upload the new data.\")))\n  }\n  else{\n    return(list(br(),\n                fluidRow(column(width = 9, actionLink(\"butt3\", label = \"<< Reset or Predict Using Another Model and/or Another Data >>\"))),\n                br(), strong(helpText(\"STEP 3 OF 3: RESULT (PREDICTED NEW DATA)\")),\n                bsCollapse(id = \"colNewPND\", open = \"colNewPND1\",\n                           bsCollapsePanel(\"Predicted Data\", value = \"colNewPND1\", dataTableOutput(\"predictedNewData\")))\n    ))\n  }\n})\n\n#tabel data hasil prediksi\noutput$predictedNewData <- renderDataTable({\n  Predicted <- round(predict(dataFRBSpmml(),dataTestBaru()), 3)\n  Obs <- seq(from = 1, to = nrow(Predicted))\n  gabungData <- cbind(Obs, dataTestBaru(), Predicted)\n  return(gabungData)\n}, options = list(pageLength=15, searching = FALSE))\n\n#SHARE galeri dan share forum\nANFISPlotFunctionShare <- function(){\n  if(input$ANFISPlotTypeShare == \"Fitting Plot\"){\n    thePlot <- getANFISfitPlotForSharing()\n  }\n  else{\n    thePlot <- getANFISpredPlotForSharing()\n  }\n  return(thePlot)\n}\n\noutput$ANFISPlotFunctionShareUI <- renderPlot({\n  thePlot <- ANFISPlotFunctionShare()\n  return(thePlot)\n})\n\nobserveEvent(input$shareANFIS, {\n  imageANFIS()\n  toggleModal2(session, \"moANFIS\", toggle=\"close\")\n})\n\nimageANFIS <-function(){\n  namafile <- SHAREfile_names()\n  direktori<-paste0(\"C:/Apache2/htdocs/fast/images/image/image\",namafile,\".png\")\n  direktori2 <- paste0(\"image/image\",namafile,\".png\")\n  png(direktori, type=\"cairo\")  \n  thePlot <- ANFISPlotFunctionShare()\n  print(thePlot)\n  dev.off()\n  inserttodbanfis(direktori2)\n}\n\ninserttodbanfis <- function(direktori = null){\n  query<- paste0(\"INSERT INTO data VALUES(null,'\",input$titleANFIS,\"','\",input$authorANFIS,\"','\",input$categoryANFIS,\"','\",input$mosummaryANFIS,\"','\",direktori,\"')\")\n  dbGetQuery(mydb, query)\n}\n\n############\n###FUNGSI SHARING KE FORUM\n\nobserveEvent(input$shareANFISForum, {\n  postToForumANFIS()\n})\n\ngetANFISMFParam <- function(){\n  stre <- getFromCapture(fsummary_varinpmf(doLearnFuzzy()))\n  HTML(paste(\"<pre style=\\\"width:600px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetANFISIFTHENRule <- function(){\n  stre <- getFromCapture(fsummary_ifthenrules(doLearnFuzzy()))\n  HTML(paste(\"<pre style=\\\"width:1000px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetANFISConsequentRule <- function(){\n  stre <- getFromCapture(fsummary_ifthenrulesconsequent(doLearnFuzzy()))\n  HTML(paste(\"<pre style=\\\"width:1000px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetANFISResidualForSharingFForum <- function(){\n  stre <- getFromCapture(getANFISResidualForSharingF())\n  HTML(paste(\"<pre style=\\\"width:300px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetANFISResidualForSharingPForum <- function(){\n  stre <- getFromCapture(getANFISResidualForSharingP())\n  HTML(paste(\"<pre style=\\\"width:300px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetANFISRealvsPredFForum <- function(){\n  stre <- getFromCapture(getANFISRealvsPredF())\n  HTML(paste(\"<pre style=\\\"width:800px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetANFISRealvsPredPForum <- function(){\n  stre <- getFromCapture(getANFISRealvsPredP())\n  HTML(paste(\"<pre style=\\\"width:800px; min-width:50px\\\">\",stre,\"</pre>\"))\n}\n\ngetContentToPostANFIS <- function(direktori, direktori2){\n  stre <- paste0(\"<p>Parameters for Membership Function:</p>\",getANFISMFParam(),\n                 \"<p>IF-THEN Rule:</p>\", getANFISIFTHENRule(), \n                 \"<p>Consequent Parts of IF-THEN Rule:</p>\", getANFISConsequentRule(),\n                 \"<p>Fitting Plot:</p><br/><img src=\\\"\",direktori,\"\\\"></img><br/>\", \n                 \"<p>Residual from Fitting Phase:</p>\", getANFISResidualForSharingFForum(),\n                 \"<p>Real vs Predicted from Fitting Phase:</p>\",getANFISRealvsPredFForum(), \n                 \"<p>Predicting Plot:</p><br/><img src=\\\"\",direktori2,\"\\\"></img><br/>\",\n                 \"<p>Residual from Predicting Phase:</p>\",getANFISResidualForSharingPForum(), \n                 \"<p>Real vs Predicted from Predicting Phase:</p>\",getANFISRealvsPredPForum())\n  return(stre)\n}\n\npostToForumANFIS <- function(){\n  tryCatch(postToForumANFISFunction(), error = function(e) idTidakDitemukan())\n}\n\npostToForumANFISFunction <- function(){\n  idForum <- 22\n  theUID <- getUserIDFromDB(input$usernameANFISForum, input$passwordANFISForum)\n  thepostID <- getLastPostID()\n  theTopicID <- getTopicID()\n  theNumPosts <- getNumPosts(idForum)\n  theNumTopics <- getNumTopics(idForum)\n  thePostCount <- getPostCount(theUID)\n  #set image\n  #dev.new()\n  namafile <- SHAREfile_names()\n  direktori<-paste0(\"C:/Apache2/htdocs/fast/fileman/Uploads/Himage\",namafile,\".png\")\n  direktori2 <- paste0(\"/fast/fileman/Uploads/Himage\",namafile,\".png\")\n  direktori3 <- paste0(\"/fast/fileman/Uploads/banner-analisis.png\")\n  png(direktori, type=\"cairo\") \n  thePlot <- getANFISfitPlotForSharing()\n  print(thePlot)\n  dev.off()\n  namafile2 <- SHAREfile_names()\n  direktori4<-paste0(\"C:/Apache2/htdocs/fast/fileman/Uploads/Himage\",namafile2,\".png\")\n  direktori42 <- paste0(\"/fast/fileman/Uploads/Himage\",namafile2,\".png\")\n  png(direktori4, type=\"cairo\") \n  thePlot2 <- getANFISpredPlotForSharing()\n  print(thePlot2)\n  dev.off()\n  #insert topic\n  queryCreateTopic <- createTopic(theTopicID, idForum, theUID, input$subjectANFISForum, direktori3, thepostID)\n  dbGetQuery(mydb, queryCreateTopic)\n  #insert post\n  queryPostContent <- postContent(thepostID, input$subjectANFISForum, getContentToPostANFIS(direktori2, direktori42), input$mosummaryANFISForum, theUID, theTopicID, idForum)\n  dbGetQuery(mydb, queryPostContent)\n  #update forum\n  queryUpdateForum <- updateForum(theNumPosts, theNumTopics, thepostID, idForum)\n  dbGetQuery(mydb, queryUpdateForum)\n  #insert log topic\n  queryLogTopic <- logTopic(theUID, theTopicID, idForum, thepostID)\n  dbGetQuery(mydb, queryLogTopic)\n  #update post member\n  queryUpdatePostCount <- updatePostCount(thePostCount, theUID)\n  dbGetQuery(mydb, queryUpdatePostCount)\n  #alert sukses dan tutup modal\n  #createAlert(session, \"modalAlert\", alertId = \"suksesAlert\", title = \"Success\", content = NULL, style = \"success\")\n  #Sys.sleep(2)\n  toggleModal2(session, \"moANFISForum\", toggle=\"close\")\n}",
    "created" : 1503284497325.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2237844701",
    "id" : "AF62963D",
    "lastKnownWriteTime" : 1486031459,
    "last_content_update" : 1486031459,
    "path" : "~/Skripsi/2/fast-beta - Copy/fast-beta/tools/analysis/anfis.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}