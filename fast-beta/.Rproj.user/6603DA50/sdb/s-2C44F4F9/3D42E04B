{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(stats)\n\n###############################\n#######Mendapatkan data########\n###############################\n\ngetdataRRR <- reactive({\n  getdata()\n})\n\nobserve({\n  ###############################\n  #######Antarmuka Utama#########\n  ###############################\n\n  if(identical(input$nav_fast, \"Robust Ridge Regression\")){\n    output$robust_ridge2 <- renderUI({\n      \n      sidebarLayout(\n        sidebarPanel(\n          div(class = \"busy\",\n              p(\"Calculation in progress ...\"),\n              img(src=\"ajaxloaderq.gif\")\n          ), # javascript calculation loading\n          \n          uiOutput(\"menuUi_RRR\"),\n          uiOutput(\"side_analisis_RRR\"),\n          uiOutput(\"side_RRR\")\n        ),\n        mainPanel(\n            uiOutput(\"ui_RRR\")\n        )\n      )\n    })\n    \n    ###############################\n    ######Antarmuka samping########\n    ###############################\n    \n    output$menuUi_RRR <- renderUI({\n      wellPanel(\n        HTML(\"<label><strong> Menu : Regression </strong></label>\"),\n        HTML(\"<br><label><strong> Tool : \", isolate(input$nav_fast),\" </strong></label>\"),\n        HTML(\"<br><label><strong> Data :\", input$datasets,\"</strong></label>\")\n      )\n    })\n    \n    output$side_analisis_RRR <- renderUI({\n      bsCollapse(multiple = TRUE, id = \"first_collapse_RRR\",\n                 bsCollapsePanel(\"Analysis\", helpText(\"\"),\n                                 uiOutput(\"analisis_var_RRR\"), value = \"first_bar_RRR1\"))\n        })\n    \n    output$analisis_var_RRR <- renderUI({\n      if(!is.null(input$first_collapse_RRR)){\n      wellPanel(\n        paste(\"Choose one dependent variable\"),\n        wellPanel(uiOutput(\"uiRRR_vardep\")),\n        paste(\"Choose two or more independent variables\"),\n        wellPanel(\n          uiOutput(\"uiRRR_varindep\"), style = \"overflow-y:scroll; max-height: 40%\"\n        ),\n        \n        actionButton(\"Button_RRR\", \"Analysis\")\n      )\n      } else return()\n    })\n    \n        output$uiRRR_vardep <- renderUI({\n          isNum <- \"numeric\" == getdata_class() \n          vars <- varnames()[isNum]\n          if(length(vars) == 0) {\n            return()\n          } else {\n            selectInput(inputId = \"varDepRRR\", label = \"Dependent variable:\", choices = vars, \n                        selected = vars[1], multiple = FALSE)\n          }\n        })\n        \n        output$uiRRR_varindep <- renderUI({\n          isNum <- \"numeric\" == getdata_class() \n          vars <- varnames()[isNum]\n          vars <- vars[-which(vars == input$varDepRRR)]\n          if(length(vars) == 0) return()\n          checkboxGroupInput(inputId = \"varIndepRRR\", label = \"Independent variable:\", choices = vars)\n          \n        })\n        \n    \n    \n    ###############################\n    ######Antarmuka pertama########\n    ###############################\n    \n    output$ui_RRR <- renderUI({\n      uiOutput(\"bantuan_RRR\")\n    })\n    \n    observeEvent(input$first_collapse_RRR, {\n      if(input$first_collapse_RRR==\"first_bar_RRR1\"){\n        output$ui_RRR <- renderUI({\n          uiOutput(\"bantuan_RRR\")\n        })\n      }\n    })\n    \n    ###############################\n    ########Fungsi button##########\n    ###############################\n    \n    observeEvent(input$Button_RRR,{\n      \n       if(input$first_collapse_RRR==\"first_bar_RRR1\"){\n          if(input$Button_RRR==0){\n            output$ui_RRR <- renderUI({\n              uiOutput(\"bantuan_RRR\")\n            })\n          } else {\n            if(length(input$varIndepRRR)!=0){\n            value_RRR <- FALSE\n            for(i in 1:length(input$varIndepRRR)){\n              for (j in 1:length(colnames(getdataRRR()))) {\n                if(input$varIndepRRR[i] == colnames(getdataRRR())[j]){\n                  value_RRR <- TRUE      \n                }\n              }  \n            }\n            \n            if(value_RRR == FALSE){\n              output$ui_RRR <- renderUI({\n                  uiOutput(\"bantuan_RRR\")\n                })\n            }else {\n              if(is.null(input$varIndepRRR) || length(input$varIndepRRR)<2){\n                output$ui_RRR <- renderUI({\n                  uiOutput(\"bantuan_RRR\")\n                })\n              }else {\n                output$ui_RRR <- renderUI({\n                  if(cekOutlier2_RRR() == TRUE){\n                    if(cekMultikol2_RRR() == TRUE){\n                      tabsetPanel(id = \"RobRid_RRR2_Tab\",\n                                  tabPanel(\"Testing\", uiOutput(\"pengujian_RRR\")),\n                                  tabPanel(\"Analysis\", uiOutput(\"analisis_RRR\")),\n                                  tabPanel(\"Summary\", uiOutput(\"kesimpulan_RRR\")),\n                                  tabPanel(\"Help\", uiOutput(\"bantuan_RRR\")))\n                    } else {\n                      tabsetPanel(id = \"RobRid_RRR2_Tab\",\n                                  tabPanel(\"Testing\", uiOutput(\"pengujian_RRR\")),\n                                  tabPanel(\"Help\", uiOutput(\"bantuan_RRR\")))\n                    }\n                  }else {\n                    tabsetPanel(id = \"RobRid_RRR2_Tab\",\n                                tabPanel(\"Testing\", uiOutput(\"pengujian_RRR\")),\n                                tabPanel(\"Help\", uiOutput(\"bantuan_RRR\")))\n                  }\n                })\n              }\n            }\n          }\n            } \n          }\n    })\n    \n    ###############################\n    ######Fungsi kesimpulan########\n    ###############################\n    \n    observeEvent(input$RobRid_RRR2_Tab, {\n      if(input$RobRid_RRR2_Tab == \"Summary\"){\n        \n        output$side_RRR <- renderUI({\n          wellPanel(\n            wellPanel(\n              strong(paste(\"Download report\")),\n              uiOutput(\"unduh_RRR\")\n            ),\n            wellPanel(\n              strong(paste(\"Share report\")),\n              uiOutput(\"Bagikan_RRR\")\n            )\n          )\n        })\n      }\n    })\n    \n    ###############################\n    ########Fungsi Download########\n    ###############################\n    \n    output$unduh_RRR <- renderUI({\n      wellPanel(\n        radioButtons('unduh_RRR', 'Choose document type : ', c('Word', 'PDF', 'HTML')),\n        downloadButton('unduhLaporan_RRR') \n      )\n    })\n    \n    output$unduhLaporan_RRR <- downloadHandler(\n      filename = function() {\n        paste('Laporan Analisis Robust Ridge Regression', sep = '.', switch(\n          input$unduh_RRR, PDF = 'pdf', HTML = 'html', Word = 'docx'\n        ))\n      },\n      \n      content = function(file) {\n        src_RRR <- normalizePath('Laporan_RRR.Rmd')\n        \n        owd_RRR <- setwd(tempdir())\n        on.exit(setwd(owd_RRR))\n        file.copy(src_RRR, 'Laporan_RRR.Rmd')\n        \n        library(rmarkdown)\n        out_RRR <- render('Laporan_RRR.Rmd', switch(\n          input$unduh_RRR,\n          PDF = pdf_document(), HTML = html_document(), Word = word_document()\n        ))\n        file.rename(out_RRR, file)\n      }\n    )\n    \n    ###############################\n    #####Fungsi Share to Forum#####\n    ###############################\n    \n    output$Bagikan_RRR <- renderUI({\n      wellPanel(\n        HTML(\"<b>Share your report: </b>\"),\n        actionButton(\"Btn_Bagikan_RRR\", \"Share\"),\n        \n        bsModal2(\"Forum_RRR\", \"Share Your Analysis\", trigger = \"Btn_Bagikan_RRR\",\n                 uiOutput(\"modalShare_RRR\"))\n      )\n    })\n    \n    output$modalShare_RRR <- renderUI({\n      user <- getUsernameFromDB()\n      if(nrow(user)==0){\n        list(\n          helpText(\"Please login into Fast Forum for using this feature\"),\n          bsAlert(\"modalAlert\")\n        )\n      }else{\n        list(\n          helpText(\"This feature allows you to share your analysis to the Forum in the Robust Ridge Regresion Subforum.\"),\n          bsAlert(\"modalAlert\"),\n          textInput(\"subject_RRR_Forum\", strong(\"Subject :\") , value = \"\"),br(),\n          strong(\"Content :\"),br(),\n          HTML('<textarea id=\"content_RRR_Forum\" rows=\"5\" cols=\"20\", class = \"form-control\"></textarea>'), br(),\n          selectInput(\"chooseCategoryShare_RRR\",\"Choose Category\",getListNode()$name), br(), br(),\n          footer = list(\n            bsButton(\"share_RRR_Forum\", \"Submit to Forum\", style=\"primary\", type = \"action\"),\n            tags$button(type = \"button\", class = \"btn btn-default\", 'data-dismiss' = \"modal\", \"Close\")\n          )\n        )\n      }\n      \n    })\n    \n    observeEvent(input$share_RRR_Forum,{\n      postRRRtoForum()\n      \n    })\n    \n    postRRRtoForum <- function(){\n      library(rmarkdown)\n      time <- format(Sys.time(),\"%a%b%d%y%H%M%S\")\n      if(nrow(getUsernameFromDB()) != 0){\n        folder <- getUsernameFromDB()\n        dir <- paste0(\"C:\\\\xampp\\\\htdocs\\\\fast_forum\\\\media\\\\\",folder,\"\\\\\",time)\n      }else{\n        dir <- paste0(\"C:\\\\xampp\\\\htdocs\\\\fast_forum\\\\media\\\\NoName\\\\\",time)\n      }\n      out <- render('Laporan_RRR.Rmd',\"html_document\",output_dir = dir,output_file = \"Laporan_RRR.html\")\n      frame <- paste0(\"<iframe src=''\",\"http://localhost/fast_forum/media/\",folder,\"/\",time,\"/Laporan_RRR.html''\",\" width= ''100%'' height=''800px''></iframe>\")\n      content <- paste0(\"<p>\",input$content_RRR_Forum,\"</p>\",\"</br>\",frame,\"</br>\")\n      insertTopic(input$subject_RRR_Forum,content,input$chooseCategoryShare_RRR)\n    }\n    \n    ###############################\n    ######Halaman pengujian########\n    ###############################\n    \n    output$pengujian_RRR <- renderUI({\n      \n      value_RRR <- FALSE\n      if(length(input$varIndepRRR)!=0){\n      for(i in 1:length(input$varIndepRRR)){\n        for (j in 1:length(colnames(getdataRRR()))) {\n          if(input$varIndepRRR[i] == colnames(getdataRRR())[j]){\n            value_RRR <- TRUE      \n          }\n        }  \n      }\n      \n      if(length(input$varIndepRRR)==0 ||length(input$varIndepRRR)<2) {\n        return(NULL)\n        } else{\n          if(value_RRR == TRUE){\n            fluidPage(\n              Kata_RRR(),\n              tabsetPanel(\n                tabPanel(\"Outlier\", uiOutput(\"Outlier_RRR\")),\n                tabPanel(\"Multicollinearity\", uiOutput(\"cekMultikol_RRR\"))\n              )\n            )\n          }\n        }\n      }else return(NULL) \n    })\n    \n    Kata_RRR <- reactive({\n      if(!is.null(input$varIndepRRR) && length(input$varIndepRRR)>1) {\n      if(cekOutlier2_RRR() == TRUE){\n        if(cekMultikol2_RRR() == TRUE){\n          Pesan_RRR <- HTML(\"<p>In this step, the data will be tested whether there are \n                                <strong>multicollinearity</strong> and <strong>outlier</strong> problems.\")\n        } else Pesan_RRR <- paste(\"Sorry, the data that you used doesn't have \n                                  multicollinearity problem, so the data can't be used for further analysis.\")\n        }else Pesan_RRR <- paste(\"Sorry, the data that you used doesn't have \n                                  outlier problem, so the data can't be used for further analysis.\")\n        \n        return(Pesan_RRR)\n      }\n      })\n    \n    output$Outlier_RRR <- renderUI({\n      conditionalPanel(condition = \"\", \n                       bsCollapse(multiple = TRUE, id = \"second_collapse_RRR1\",\n                                  bsCollapsePanel(\"QQ Plot\", helpText(\"\"),\n                                                  plotOutput(\"qqplot_RRR\"),\n                                                  id = \"The plot above is a QQ plot from the data\", value = \"bar1RRR1\"),\n                                  bsCollapsePanel(\"Leverage Value\", helpText(\"\"),\n                                                  wellPanel(tableOutput(\"hatRRR\"), style = \"overflow-y:scroll; max-height: 400px\"), \n                                                  #tableOutput(\"hatRRR\"),\n                                                  id = \"Find outlier using Leverage Values\", value = \"bar1RRR2\"),\n                                  bsCollapsePanel(\"DFITS\", helpText(\"\"),\n                                                  wellPanel(tableOutput(\"DFITSRRR\"), style = \"overflow-y:scroll; max-height: 400px\"),\n                                                  #tableOutput(\"DFITSRRR\"),\n                                                  id = \"Find outlier using DFITS\", value = \"bar1RRR3\")\n                       )\n                       \n      )\n    })\n    \n    output$cekMultikol_RRR <- renderUI({\n      conditionalPanel(condition = \"\", \n                       bsCollapse(multiple = TRUE, id = \"collapseRRR2\",\n                                  bsCollapsePanel(\"Variance Inflation Factor(VIF)\", helpText(\"\"),\n                                                  tableOutput(\"vifRRR\"),\n                                                  value = \"bar2RRR1\"),\n                                  bsCollapsePanel(\"Correlation Matrix X\", helpText(\"\"),\n                                                  tableOutput(\"cor_RRR\"), \n                                                  id = verbatimTextOutput(\"nama_RRR\"),\n                                                  value = \"bar2RRR2\"),\n                                  bsCollapsePanel(\"Tolerance Value\", helpText(\"\"),\n                                                  tableOutput(\"tolRRR\"),\n                                                  value = \"bar2RRR3\")\n                       )\n                       \n      )\n    })\n    \n    output$nama_RRR <- renderText({\n        print1_RRR <- \"Where : \"\n        print2_RRR <- \"\"\n        \n        data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n        nama_var_RRR1 <- colnames(data_X_RRR)\n        \n        for(i in 1:length(nama_var_RRR1)){\n          print2_RRR <- paste(\"var\", i , \"  : \", nama_var_RRR1[i])\n          print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n        }\n        paste(print1_RRR)\n    })\n    \n    ###############################\n    ######Halaman analisis#########\n    ###############################\n    \n    output$analisis_RRR <- renderUI({\n      fluidPage(\n        HTML(\"<p>Choose Robust Ridge Regression method that will be used</p>\"),\n        sidebarLayout(\n          sidebarPanel(\n            uiOutput(\"radioButton_RRR\")\n          ),\n          mainPanel(\n            wellPanel(\n              verbatimTextOutput(\"hitung_RRR\"),style =\"overflow-y:scroll; max-height: 40%; max-width: 80%\"\n            )\n          )\n        )\n      )\n    })\n    \n    output$radioButton_RRR <- renderUI({\n      radioButtons(\"Method_RRR\", \"Metode :\",\n                   c(\"Robust Ridge Regression using M estimator\" = \"M_RRR\",\n                     \"Robust Ridge Regression using S estimator\" = \"S_RRR\",\n                     \"Robust Ridge Regression using MM estimator\" = \"MM_RRR\",\n                     \"Robust Ridge Regression using LTS estimator\" = \"LTS_RRR\"))\n    })\n    \n    ###############################\n    #####Halaman kesimpulan########\n    ###############################\n    \n    output$kesimpulan_RRR <- renderUI({\n      wellPanel(\n        verbatimTextOutput(\"kesimpulan2_RRR\"),\n        plotOutput(\"plot_final_RRR\"), style=\"max-width : 100%\"\n      )\n    })\n    \n    ###############################\n    #####Halaman bantuan########\n    ###############################\n    \n    output$bantuan_RRR <- renderUI({\n      HTML(\"<h3 style=text-align:center><b>Robust Ridge Regression</b></h3> </br>\n           <p>Robust Ridge Regression method is one of regression method that used \n              when facing outlier and multicollinearity problem.\n              Robust estimator that can be used are :\n           <ul>\n           <li>Robust Ridge Regression using M estimator </li>\n           <li>Robust Ridge Regression using S estimator </li>\n           <li>Robust Ridge Regression using MM estimator </li>\n           <li>Robust Ridge Regression using LTS estimator </li>\n           </ul> </br>\n            Procedure using this application:\n           <ol>\n           <li>Choose analysis</li>\n           <li>Choose one variable dependent and <b>at least two </b> independent variable independen</li>\n           <li>Choose analysis button</li>\n           <li>Find outlier and multicollinearity problem using some testing \n               method in Testing tab</li>\n           <li>Choose robust estimator that will be used</li>\n           <li>Find the result in Summary tab.</li>\n           </ol> </br>\n           The result given by analysis result are :\n           <ul>\n           <li>Coefficient <b>before</b> transformed back</li>\n           <li>Coefficient <b>after</b> transformed back</li>\n           <li>MSE (Mean Square Error) <b>before</b> and <b>after</b> transformed back</li>\n           <li>R-square and Adjusted R-square</li>\n           <li>Data visualization using QQ plot</li>\n           </ul> </br>\n           </p>\")\n      \n    })\n    \n    ###############################\n    ####Plot dan Perhitungan#######\n    ###############################\n    \n    #mendapatkan data variabel dependen dan independen\n    \n    getdatavarIndepRRR<- reactive({\n      if(!is.null(input$varIndepRRR) && length(input$varIndepRRR)>1) {\n        data2RRR<-getdataRRR()\n        return(data2RRR[,as.character(input$varIndepRRR)])\n        }\n    })\n    \n    getdatavarDepRRR <- reactive({\n      if(is.null(input$varDepRRR)) return(NULL)\n      else {\n        data1RRR<-getdataRRR()\n        return(data1RRR[,as.character(input$varDepRRR)])}\n    })\n    \n    #data diubah menjadi matriks\n    matriksX_RRR <- reactive({\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      matriks_X_RRR <- as.matrix(data_X_RRR, ncol = ncol(data_X_RRR))\n      return(matriks_X_RRR)\n    })\n    \n    matriksY_RRR <- reactive({\n      data_Y_RRR <- as.data.frame(getdatavarDepRRR())\n      colnames(data_Y_RRR)[1] <- input$varDepRRR\n      matriks_Y_RRR <- as.matrix(data_Y_RRR)\n      return(matriks_Y_RRR)\n    })\n    \n    #mendapatkan model regresi\n    modelRRR <- reactive({\n        data_Y_RRR <- as.data.frame(getdatavarDepRRR())\n        colnames(data_Y_RRR)[1] <- input$varDepRRR\n        data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n        modelRRR <- lm(data_Y_RRR[,as.character(input$varDepRRR)] ~ ., data = data_X_RRR)\n        return(modelRRR)\n    })\n    \n    #pengecekan adanya outlier\n    \n    cekOutlier2_RRR <- reactive({\n      value_RRR0 <- FALSE\n      if(length(input$varIndepRRR)!=0){\n        for(i in 1:length(input$varIndepRRR)){\n          for (j in 1:length(colnames(getdataRRR()))) {\n            if(input$varIndepRRR[i] == colnames(getdataRRR())[j]){\n              value_RRR0 <- TRUE      \n            }\n          }  \n        }\n        \n        if(value_RRR0 == TRUE){\n          if(!is.null(input$varIndepRRR) || length(input$varIndepRRR)>1) {\n            value_RRR <- TRUE\n            \n            data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n            count_X_RRR <- ncol(data_X_RRR)+1\n            model_RRR <- modelRRR()\n            model2_RRR <- influence.measures(model_RRR)\n            hasil_RRR <- as.data.frame(model2_RRR$infmat)\n            \n            hat_temp_RRR <- hasil_RRR[\"hat\"]\n            \n            for(i in 1:nrow(hat_temp_RRR)){\n              if(hat_temp_RRR[i,] >(2*count_X_RRR)/nrow(hat_temp_RRR)){\n                value_RRR <-TRUE\n                break\n              } else value_RRR <-FALSE\n            }\n            \n            if(value_RRR == FALSE){\n              DFIT_temp_RRR <- abs(hasil_RRR[\"dffit\"])\n              \n              for(i in 1:nrow(DFIT_temp_RRR)){\n                if(DFIT_temp_RRR[i,] >(2*sqrt(count_X_RRR/nrow(DFIT_temp_RRR)))){\n                  value_RRR <-TRUE\n                  break\n                } else value_RRR <-FALSE\n              }\n            }\n            return(value_RRR)\n          }\n        }else return(NULL)\n      } else return(NULL)\n    })\n    \n    #pengecekan adanya multikolinearitas\n    \n    cekMultikol2_RRR <- reactive({\n      value_RRR <- TRUE\n      VIF_RRR_temp <- VIF_RRR()\n      VIF_RRR_data <- as.data.frame(VIF_RRR_temp)\n      for(i in 1:nrow(VIF_RRR_data)){\n        if(VIF_RRR_data[i,] < 10){\n          value_RRR <-FALSE\n        } else {\n          value_RRR <- TRUE\n          break\n        }\n      }\n      return(value_RRR)\n    })\n    \n    #hitung outlier\n    \n    ##menggambar plot\n    \n    output$qqplot_RRR <- renderPlot({\n      model_RRR <- modelRRR()\n      plot(model_RRR, which = 2) \n    })\n    \n    ##nilai leverage\n    Measure_RRR <- reactive({\n      model_RRR <- modelRRR()\n      Hasil_measure_RRR <- influence.measures(model_RRR)\n      return(Hasil_measure_RRR)\n    })\n    \n    output$hatRRR <- renderTable({\n        Leverage0_RRR()\n    })\n    \n    Leverage0_RRR <- function(){\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      count_X_RRR <- ncol(data_X_RRR)+1\n      hat_RRR <- Measure_RRR()\n      hat_temp1_RRR <- as.data.frame(hat_RRR$infmat)\n      hat_temp2_RRR <- hat_temp1_RRR[\"hat\"]\n      for(i in 1:nrow(hat_temp2_RRR)){\n        if(hat_temp2_RRR[i,] >(2*count_X_RRR)/nrow(hat_temp2_RRR)){\n          hat_temp2_RRR[i,] <- \"Outlier\"\n        } else hat_temp2_RRR[i,] <- \"Not Outlier\"\n      }\n      hat_data_RRR <- cbind.data.frame(hat_temp1_RRR[\"hat\"], hat_temp2_RRR)\n      colnames(hat_data_RRR) <- c(\"Leverage Values\", \"Outlier\")\n      return(hat_data_RRR)\n    }\n    \n    ##nilai DFIT\n    output$DFITSRRR <- renderTable({\n      DFITS0_RRR()  \n    })\n    \n    DFITS0_RRR <- function(){\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      count_X_RRR <- ncol(data_X_RRR)+1\n      DFIT_RRR <- Measure_RRR()\n      DFIT_temp1_RRR <- as.data.frame(DFIT_RRR$infmat)\n      DFIT_temp2_RRR <- abs(DFIT_temp1_RRR[\"dffit\"])\n      for(i in 1:nrow(DFIT_temp2_RRR)){\n        if(DFIT_temp2_RRR[i,] >(2*sqrt(count_X_RRR/nrow(DFIT_temp2_RRR)))){\n          DFIT_temp2_RRR[i,] <- \"Outlier\"\n        } else DFIT_temp2_RRR[i,] <- \"Not Outlier\"\n      }\n      DFIT_data_RRR <- cbind.data.frame(DFIT_temp1_RRR[\"dffit\"], DFIT_temp2_RRR)\n      colnames(DFIT_data_RRR) <- c(\"DFFIT\", \"Outlier\")\n      return(DFIT_data_RRR)\n    }\n    \n    #hitung multikolinearitas\n    \n    ##nilai VIF\n    output$vifRRR <- renderTable({\n      VIF_RRR0()\n    })\n    \n    VIF_RRR <- reactive({\n      model_RRR <- modelRRR()\n      data_Y_RRR <- as.data.frame(getdatavarDepRRR())\n      colnames(data_Y_RRR)[1] <- input$varDepRRR\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      matrikX_temp_RRR <- as.matrix(data_X_RRR[,as.character(input$varIndepRRR)])\n      VIFRRR <- vif(data_Y_RRR[,as.character(input$varDepRRR)] ~ matrikX_temp_RRR)\n      \n      #VIFRRR <- vif(data_Y_RRR[,as.character(input$varDepRRR)] ~ ., data = data_X_RRR)\n      return(VIFRRR)\n    })\n    \n    VIF_RRR0 <- function(){\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      VIF_RRR_temp <- VIF_RRR()\n      VIF_RRR_data <- as.data.frame(VIF_RRR_temp)\n      row.names(VIF_RRR_data) <- colnames(data_X_RRR)\n      colnames(VIF_RRR_data) <-\"VIF\"\n      VIF_uji_RRR <- matrix(0, ncol = 1, nrow = nrow(VIF_RRR_data))\n      for(i in 1:nrow(VIF_RRR_data)){\n        if(VIF_RRR_data[i,] > 10){\n          VIF_uji_RRR[i,] <- \"Multicollinear\"\n        } else VIF_uji_RRR[i,] <- \"Not Multicollinear\"\n      }\n      VIF_RRR_data <-cbind.data.frame(VIF_RRR_data, VIF_uji_RRR)\n      colnames(VIF_RRR_data)[2] <- \"Conclusion\"\n      return(VIF_RRR_data)\n    }\n    \n    ##matriks korelasi\n    output$cor_RRR <- renderTable({\n      matkol0_RRR()\n    })\n    \n    matkol0_RRR <- function(){\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      mat_cor_RRR <- cor(data_X_RRR)\n      for (i in 1:nrow(mat_cor_RRR)) {\n        colnames(mat_cor_RRR)[i] <- paste(\"var\", i)\n        row.names(mat_cor_RRR)[i] <- paste(\"var\", i)\n      }\n      return(mat_cor_RRR)\n    }\n    \n    ##nilai TOL\n    output$tolRRR <- renderTable({\n      tol_RRR0()  \n    })\n    \n    tol_RRR0 <- function(){\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n    \n    VIF_RRR_temp <- VIF_RRR()\n    VIF_RRR_data <- as.matrix(VIF_RRR_temp)\n    row.names(VIF_RRR_data) <- colnames(data_X_RRR)\n    \n    Tol_uji_RRR <- matrix(0, ncol = 2, nrow = nrow(VIF_RRR_data))\n    row.names(Tol_uji_RRR) <- row.names(VIF_RRR_data)\n    for (i in 1:nrow(Tol_uji_RRR)) {\n      Tol_uji_RRR[i,1] <- round(1/VIF_RRR_data[i,1], 5)\n    }\n    colnames(Tol_uji_RRR) <- c(\"Tol\", \"Conclusion\")\n    for(i in 1:nrow(Tol_uji_RRR)){\n      if(Tol_uji_RRR[i,1] < 0.1){\n        Tol_uji_RRR[i,2] <- \"Multicollinear\"\n      } else Tol_uji_RRR[i,2] <- \"Not Multicollinear\"\n    }\n    return(Tol_uji_RRR)\n    }\n    \n    \n    #proses standarisasi data\n    \n    Standarisasi_RRR <- reactive({\n      matriksX_RRR <- matriksX_RRR()\n      matriksY_RRR <- matriksY_RRR()\n      \n      ybar_RRR <- mean(matriksY_RRR)\n      matriksyi_RRR <- matriksY_RRR - ybar_RRR\n      \n      matriksxi_RRR <- matrix(0, ncol = ncol(matriksX_RRR), nrow = nrow(matriksX_RRR))\n      for(i in 1:ncol(matriksX_RRR)){\n        rata2_RRR <- mean(matriksX_RRR[,i])\n        matriksxi_RRR[,i] <- matriksX_RRR[,i] - rata2_RRR\n      }\n      \n      n_RRR <- nrow(matriksY_RRR)\n      stemp_y_RRR <- (matriksyi_RRR^2)/(n_RRR-1)\n      S_y_RRR <- sqrt(sum(stemp_y_RRR))\n      matriksY_R_RRR <- matriksyi_RRR/(S_y_RRR*(sqrt(n_RRR-1))) \n      \n      matriksxi_R_RRR <- matrix(0, ncol = ncol(matriksxi_RRR), nrow = nrow(matriksxi_RRR))\n      for(i in 1:ncol(matriksxi_RRR)){\n        stemp_x_RRR <- (matriksxi_RRR[,i]^2)/(n_RRR-1) \n        S_x_RRR <- sqrt(sum(stemp_x_RRR))\n        matriksxi_R_RRR[,i] <- matriksxi_RRR[,i]/(S_x_RRR*(sqrt(n_RRR-1))) \n      }\n      return(list(matriksX_RRR = matriksxi_R_RRR, matriksY_RRR = matriksY_R_RRR))\n    })\n    \n    \n    #proses hitung robust\n    robust_M_RRR <- reactive({\n      matriksX_RRR <- Standarisasi_RRR()$matriksX_RRR\n      matriksY_RRR <- Standarisasi_RRR()$matriksY_RRR\n      \n      matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksX_RRR)%*%(t(matriksX_RRR)%*%matriksY_RRR)\n      matrikskump_b_RRR <- t(matriksb_RRR)\n      value_RRR <- TRUE\n      \n      while(value_RRR){\n        \n        matriksY_cap_RRR <- matriksX_RRR%*%matriksb_RRR\n        \n        matrikse_RRR <- matriksY_RRR - matriksY_cap_RRR\n        \n        sigma_cap_i_RRR <- median(abs(matrikse_RRR - median(matrikse_RRR)))/0.6745\n        matriksui_RRR <- matrikse_RRR/sigma_cap_i_RRR\n        \n        matrikswi_RRR<-matrix(0, nrow = nrow(matriksui_RRR))\n        for(i in 1:nrow(matrikswi_RRR)){\n          if(matriksui_RRR[i,]<= 4.685){\n            matrikswi_RRR[i,] <- (1-(matriksui_RRR[i,]/4.685)^2)^2\n          }\n          else matrikswi_RRR[i,] <- 0\n        }\n        \n        matriksWifinal_RRR <- matrix(0, ncol = nrow(matrikswi_RRR), nrow = nrow(matrikswi_RRR) )\n        for(i in 1:nrow(matriksWifinal_RRR)){\n          matriksWifinal_RRR[i,i] <- matrikswi_RRR[i,]\n        }\n        matriksWifinal_RRR\n        \n        matriksb_temp_RRR<- matrikskump_b_RRR\n        col_RRR <- ncol(matriksb_temp_RRR)\n        n_RRR <- nrow(matriksb_temp_RRR)+1\n        matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksX_RRR)%*%(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksY_RRR)\n        \n        matrikskump_b_RRR <- matrix(0,ncol =col_RRR,  nrow = n_RRR)\n        \n        for(i in 1:nrow(matriksb_temp_RRR)){\n          for(j in 1:ncol(matriksb_temp_RRR)){\n            matrikskump_b_RRR[i,j] <- matriksb_temp_RRR[i,j] \n          }\n        }\n        \n        for(i in 1:ncol(matrikskump_b_RRR)){\n          matrikskump_b_RRR[n_RRR,i] <- matriksb_RRR[i,]\n        }\n        \n        for(i in 1:ncol(matrikskump_b_RRR)){\n          if(nrow(matrikskump_b_RRR) < 2000){\n            if(nrow(matrikskump_b_RRR) < 1000){\n              if(matrikskump_b_RRR[n_RRR,i]==matrikskump_b_RRR[n_RRR-1,i]){\n                value_RRR <- FALSE    \n                break\n              }\n            }else if(abs(matrikskump_b_RRR[n_RRR,i]-matrikskump_b_RRR[n_RRR-1,i])<1e-4){\n              value_RRR <- FALSE    \n              break\n            }\n          } else {\n            value_RRR <- FALSE    \n            break\n          }\n        }\n      }\n      \n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      colnames(matrikskump_b_RRR) <- colnames(data_X_RRR)\n      return(matrikskump_b_RRR[n_RRR,])\n    })\n    \n    robust_S_RRR <- reactive({\n      matriksX_RRR <- Standarisasi_RRR()$matriksX_RRR\n      matriksY_RRR <- Standarisasi_RRR()$matriksY_RRR\n      \n      matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksX_RRR)%*%(t(matriksX_RRR)%*%matriksY_RRR)\n      matrikskump_b_RRR <- t(matriksb_RRR)\n      value_RRR <- TRUE\n      iterasi_RRR <- 1\n      matriksui_RRR<- NULL\n      \n      while(value_RRR){\n        matriksY_cap_RRR <- matriksX_RRR%*%matriksb_RRR\n        \n        matrikse_RRR <- matriksY_RRR - matriksY_cap_RRR\n        \n        if(iterasi_RRR == 1){\n          sigma_cap_i_RRR <- median(abs(matrikse_RRR - median(matrikse_RRR)))/0.6745\n        }\n        else {\n          if(!is.null(matriksui_RRR)){\n            rhoui_RRR <- matrix(0, nrow = nrow(matrikse_RRR))\n            for(i in 1: nrow(matriksui_RRR)){\n              if(abs(matriksui_RRR[i,])>1.547){\n                rhoui_RRR[i,] <- (1.547^2)/6 \n              }\n              else{\n                rhoui_RRR[i,] <- ((matriksui_RRR[i,]^2)/2) - ((matriksui_RRR[i,]^4)/(2*(1.547^2))) + ((matriksui_RRR[i,]^6)/(6*(1.547^4))) \n              }\n            }\n            \n            \n            for(j in 1: nrow(rhoui_RRR)){\n              matrikswi_RRR[j,] <- rhoui_RRR[j,]/(matriksui_RRR[j,]^2) \n            }\n          }  \n          sigmatemp_RRR <- matrix(0, nrow = nrow(matrikswi_RRR))\n          for(l in 1:nrow(sigmatemp_RRR)){\n            sigmatemp_RRR[l,] <- matrikswi_RRR[l,]*(matrikse_RRR[l,]^2)\n          }\n          \n          sigma_cap_i_RRR <- sqrt(sum(sigmatemp_RRR)/(nrow(matriksY_RRR)*0.199))\n        }\n        \n        matriksui_RRR <- matrikse_RRR/sigma_cap_i_RRR\n        \n        if(iterasi_RRR == 1) {\n          matrikswi_RRR <- matrix(0, nrow = nrow(matriksui_RRR))\n          \n          for(i in 1:nrow(matriksui_RRR)){\n            if(abs(matriksui_RRR[i,])>1.547){\n              matrikswi_RRR[i,] <- 0\n            }\n            else {\n              matrikswi_RRR[i,] <- (1-(matriksui_RRR[i,]/1.547)^2)^2\n            }\n          }\n        }\n        \n        matriksWifinal_RRR <- matrix(0, ncol = nrow(matrikswi_RRR), nrow = nrow(matrikswi_RRR) )\n        for(i in 1:nrow(matriksWifinal_RRR)){\n          matriksWifinal_RRR[i,i] <- matrikswi_RRR[i,]\n        }\n        matriksWifinal_RRR\n        \n        matriksb_temp_RRR <- matrikskump_b_RRR\n        col_RRR <- ncol(matriksb_temp_RRR)\n        n_RRR <- nrow(matriksb_temp_RRR)+1\n        matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksX_RRR)%*%(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksY_RRR)\n        \n        matrikskump_b_RRR <- matrix(0,ncol =col_RRR,  nrow = n_RRR)\n        \n        for(i in 1:nrow(matriksb_temp_RRR)){\n          for(j in 1:ncol(matriksb_temp_RRR)){\n            matrikskump_b_RRR[i,j] <- matriksb_temp_RRR[i,j] \n          }\n        }\n        \n        for(i in 1:ncol(matrikskump_b_RRR)){\n          matrikskump_b_RRR[n_RRR,i]<- matriksb_RRR[i,]\n        }\n        \n        for(i in 1:ncol(matrikskump_b_RRR)){\n          if(nrow(matrikskump_b_RRR) < 2000){\n            if(nrow(matrikskump_b_RRR) < 1000){\n              if(matrikskump_b_RRR[n_RRR,i]==matrikskump_b_RRR[n_RRR-1,i]){\n                value_RRR <- FALSE    \n                break\n              }\n            }else if(abs(matrikskump_b_RRR[n_RRR,i]-matrikskump_b_RRR[n_RRR-1,i])<1e-4){\n              value_RRR <- FALSE    \n              break\n            }\n          } else {\n            value_RRR <- FALSE    \n            break\n          }\n        }\n        \n        iterasi_RRR <-iterasi_RRR+1\n      }\n      \n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      colnames(matrikskump_b_RRR) <- colnames(data_X_RRR)\n      return(matrikskump_b_RRR[n_RRR,])\n    }\n    )\n    \n    robust_MM_RRR <- reactive({\n      matriksX_RRR <- Standarisasi_RRR()$matriksX_RRR\n      matriksY_RRR <- Standarisasi_RRR()$matriksY_RRR\n      \n      matriksb_RRR <- robust_S_RRR()\n      \n      matrikskump_b_RRR <- t(matriksb_RRR)\n      value_RRR <- TRUE\n      iterasi_RRR <- 1\n      matriksui_RRR<- NULL\n      \n      while(value_RRR){\n        matriksY_cap_RRR <- matriksX_RRR%*%matriksb_RRR\n        \n        matrikse_RRR <- matriksY_RRR - matriksY_cap_RRR\n        \n        sigma_cap_i_RRR <- median(abs(matrikse_RRR - median(matrikse_RRR)))/0.6745\n        \n        matriksui_RRR <- matrikse_RRR/sigma_cap_i_RRR\n        \n        matrikswi_RRR <-matrix(0, nrow = nrow(matriksui_RRR))\n        for(i in 1:nrow(matrikswi_RRR)){\n          if(matriksui_RRR[i,]<= 4.68){\n            matrikswi_RRR[i,] <- (1-(matriksui_RRR[i,]/4.68)^2)^2\n          }\n          else matrikswi_RRR[i,] <- 0\n        }\n        \n        matriksWifinal_RRR <- matrix(0, ncol = nrow(matrikswi_RRR), nrow = nrow(matrikswi_RRR) )\n        for(i in 1:nrow(matriksWifinal_RRR)){\n          matriksWifinal_RRR[i,i] <- matrikswi_RRR[i,]\n        }\n        \n        matriksb_temp_RRR <- matrikskump_b_RRR\n        col_RRR <- ncol(matriksb_temp_RRR)\n        n_RRR <- nrow(matriksb_temp_RRR)+1\n        matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksX_RRR)%*%(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksY_RRR)\n        \n        matrikskump_b_RRR <- matrix(0,ncol =col_RRR,  nrow = n_RRR)\n        \n        for(i in 1:nrow(matriksb_temp_RRR)){\n          for(j in 1:ncol(matriksb_temp_RRR)){\n            matrikskump_b_RRR[i,j] <- matriksb_temp_RRR[i,j] \n          }\n        }\n        \n        for(i in 1:ncol(matrikskump_b_RRR)){\n          matrikskump_b_RRR[n_RRR,i]<- matriksb_RRR[i,]\n        }\n        \n        for(i in 1:ncol(matrikskump_b_RRR)){\n          if(nrow(matrikskump_b_RRR) < 2000){\n            if(nrow(matrikskump_b_RRR) < 1000){\n              if(matrikskump_b_RRR[n_RRR,i]==matrikskump_b_RRR[n_RRR-1,i]){\n                value_RRR <- FALSE    \n                break\n              }\n            }else if(abs(matrikskump_b_RRR[n_RRR,i]-matrikskump_b_RRR[n_RRR-1,i])<1e-4){\n              value_RRR <- FALSE    \n              break\n            }\n          } else {\n            value_RRR <- FALSE    \n            break\n          }\n        }\n        \n        iterasi_RRR <-iterasi_RRR+1\n      }\n      \n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      colnames(matrikskump_b_RRR) <- colnames(data_X_RRR)\n      return(matrikskump_b_RRR[n_RRR,])\n    }\n    )\n    \n    robust_LTS_RRR <- reactive({\n      matriksX_RRR <- Standarisasi_RRR()$matriksX_RRR\n      matriksY_RRR <- Standarisasi_RRR()$matriksY_RRR\n      \n      matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksX_RRR)%*%(t(matriksX_RRR)%*%matriksY_RRR)\n      p_RRR <- ncol(matriksX_RRR)\n      \n      value_RRR <- TRUE\n      iterasi_RRR <- 1\n      \n      while(value_RRR){\n        matriksY_cap_RRR <- matriksX_RRR%*%matriksb_RRR\n        \n        matrikse_RRR <- matriksY_RRR - matriksY_cap_RRR\n        \n        matrikse_kuadrat1_RRR <- matrikse_RRR^2\n        matrikse_kuadrat_RRR <- sort(matrikse_RRR^2)\n        \n        E_kuadrat_RRR <- sum(matrikse_kuadrat_RRR)\n        \n        n_RRR <- nrow(matriksY_RRR)\n        \n        h_RRR <- ceiling((n_RRR/2) + (((p_RRR-1)+2)/2))\n        \n        chn_RRR <- 1/(qnorm((h_RRR+n_RRR)/(2*n_RRR)))\n        psi_RRR <- (1/sqrt(2*pi))*exp(-((1/chn_RRR)^2)/2)\n        dhn_RRR <- 1/(sqrt(1-((2*n_RRR*psi_RRR)/(h_RRR*chn_RRR))))\n        S_LTS_RRR <- dhn_RRR*sqrt((1/h_RRR)*E_kuadrat_RRR)\n        \n        \n        matrikswi_RRR <-matrix(0, nrow = nrow(matrikse_RRR))\n        for(i in 1:nrow(matrikse_RRR)){\n          if(abs(matrikse_RRR[i,])/S_LTS_RRR > 2.5){\n            matrikswi_RRR[i,] <- 0\n          }\n          else matrikswi_RRR[i,] <- 1\n        }\n        \n        matriksWifinal_RRR <- matrix(0, ncol = nrow(matrikswi_RRR), nrow = nrow(matrikswi_RRR) )\n        for(i in 1:nrow(matriksWifinal_RRR)){\n          matriksWifinal_RRR[i,i] <- matrikswi_RRR[i,]\n        }\n        \n        matriksb_RRR <- solve(t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksX_RRR)%*%\n          (t(matriksX_RRR)%*%matriksWifinal_RRR%*%matriksY_RRR)\n        \n        if(iterasi_RRR==1){\n          matrikskump_b_RRR <- t(matriksb_RRR)\n        }\n        if(iterasi>1){\n          matriksb2_RRR <- t(matriksb_RRR)\n          matrikskump_b_RRR <- rbind(matrikskump_b_RRR, matriksb2_RRR)\n        }\n        \n        matriksgab_RRR <- as.matrix(cbind(matriksY_RRR, matriksX_RRR, matrikse_kuadrat_RRR))\n        matriksgab_RRR <- matriksgab_RRR[order(matrikse_kuadrat_RRR),]\n        matriksgab_RRR <- matriksgab_RRR[1:h_RRR,]\n        matriksY_RRR <- as.matrix(matriksgab_RRR[,1])\n        matriksX_RRR <- matriksgab_RRR[,1:p_RRR+1]\n        \n        \n        if(iterasi>1){\n          if(h_RRR==nrow(matriksX_RRR)){\n            value_RRR <- FALSE\n            break\n          }\n        }\n        iterasi_RRR <- iterasi_RRR+1\n      }\n      \n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      colnames(matrikskump_b_RRR) <- colnames(data_X_RRR)\n      \n      matriksb_RRR <- matrikskump_b_RRR[nrow(matrikskump_b_RRR),]\n      return(matriksb_RRR)\n    })\n    \n    #proses mendapatkan intercept\n    Intercept_RRR <- reactive({\n      data_Y_RRR <- as.matrix(getdatavarDepRRR())\n      data_X_RRR <- as.matrix(getdatavarIndepRRR())\n      \n      rata2_Y_RRR <- mean(data_Y_RRR[,1])\n      rata2_X_RRR <- matrix(0, nrow=ncol(data_X_RRR))\n      \n      for(i in 1:nrow(rata2_X_RRR)){\n        rata2_X_RRR[i,1] <- mean(data_X_RRR[,i]) \n      }\n      \n      Estimator_RRR <- as.matrix(Final_RRR()$sesudah_RRR)\n      \n      Beta0_RRR <- rata2_Y_RRR\n      \n      for(i in 1:nrow(rata2_X_RRR)){\n        Beta0_RRR <- Beta0_RRR - Estimator_RRR[i,1]*rata2_X_RRR[i,1]\n      }\n      \n      return(Beta0_RRR)\n    })\n    \n    #proses ridge robust\n    Final_RRR <- reactive({\n      matriksxi_R_RRR <- Standarisasi_RRR()$matriksX_RRR\n      matriksY_R_RRR <- Standarisasi_RRR()$matriksY_RRR\n      matriksb_RRR <- matrix(0, nrow = ncol(matriksxi_R_RRR))\n      \n      if(!is.null(input$Method_RRR)){\n        if(input$Method_RRR == \"M_RRR\"){\n          matriksb_RRR <- robust_M_RRR()\n        } else if(input$Method_RRR == \"S_RRR\"){\n          matriksb_RRR <- robust_S_RRR()\n        } else if(input$Method_RRR == \"MM_RRR\"){\n          matriksb_RRR <- robust_MM_RRR()\n        } else if(input$Method_RRR == \"LTS_RRR\"){\n          matriksb_RRR <- robust_LTS_RRR()\n        }\n      }\n      \n      S_kuadrat_Robust_RRR <- (t(matriksY_R_RRR - (matriksxi_R_RRR%*%matriksb_RRR))%*%(matriksY_R_RRR - (matriksxi_R_RRR%*%matriksb_RRR)))/(nrow(matriksY_R_RRR)-ncol(matriksxi_R_RRR))\n      K_m_RRR <- sum(((ncol(matriksxi_R_RRR))*S_kuadrat_Robust_RRR)/(t(matriksb_RRR)%*%matriksb_RRR))\n      \n      I_RRR <- diag(1, ncol(matriksxi_R_RRR))\n      matriksb_Robust_RRR <- solve((t(matriksxi_R_RRR)%*%matriksxi_R_RRR) + (K_m_RRR*I_RRR))%*%(t(matriksxi_R_RRR)%*%(matriksxi_R_RRR%*%matriksb_RRR))\n      \n      matriksX_RRR <- matriksX_RRR()\n      matriksY_RRR <- matriksY_RRR()\n      \n      ybar_RRR <- mean(matriksY_RRR)\n      matriksyi_RRR <- matriksY_RRR - ybar_RRR\n      \n      matriksxi_RRR <- matrix(0, ncol = ncol(matriksX_RRR), nrow = nrow(matriksX_RRR))\n      for(i in 1:ncol(matriksX_RRR)){\n        rata2_RRR <- mean(matriksX_RRR[,i])\n        matriksxi_RRR[,i] <- matriksX_RRR[,i] - rata2_RRR\n      }\n      \n      n_RRR <- nrow(matriksY_RRR)\n      \n      for(i in 1:ncol(matriksxi_R_RRR)){\n        stemp_y_RRR <- (matriksyi_RRR^2)/(n_RRR-1)\n        S_y_RRR <- sqrt(sum(stemp_y_RRR))\n        \n        stemp_x_RRR <- (matriksxi_RRR[,i]^2)/(n_RRR-1) \n        S_x_RRR <- sqrt(sum(stemp_x_RRR))\n        \n        matriksb_Robust_RRR[i,] <- (S_y_RRR/S_x_RRR)*matriksb_Robust_RRR[i,]\n      }\n      \n      matriksb_RRR <- as.matrix(matriksb_RRR)\n      Estimator_RRR <- matriksb_Robust_RRR\n      return(list(sebelum_RRR = matriksb_RRR, sesudah_RRR = Estimator_RRR))\n    })\n    \n    #MSE sebelum transformasi\n    MSE_RRR <- reactive({\n      matriksxi_R_RRR <- Standarisasi_RRR()$matriksX_RRR\n      matriksY_R_RRR <- Standarisasi_RRR()$matriksY_RRR\n      \n      temp_eigen_RRR <- t(matriksxi_R_RRR)%*%matriksxi_R_RRR\n      nilai_eigen_RRR <- matrix(eigen(temp_eigen_RRR)$values)\n      \n      matriksb_RRR <- Final_RRR()$sebelum_RRR\n      S_kuadrat_Robust_RRR <- (t(matriksY_R_RRR - (matriksxi_R_RRR%*%matriksb_RRR))%*%(matriksY_R_RRR - (matriksxi_R_RRR%*%matriksb_RRR)))/(nrow(matriksY_R_RRR)-ncol(matriksxi_R_RRR))\n      K_m_RRR <- sum(((ncol(matriksxi_R_RRR))*S_kuadrat_Robust_RRR)/(t(matriksb_RRR)%*%matriksb_RRR))\n      \n      matriks_temp_RRR <- matrix(0, nrow = nrow(nilai_eigen_RRR))\n      for(i in 1:nrow(matriks_temp_RRR)){\n        matriks_temp_RRR[i,] <- nilai_eigen_RRR[i,]/(nilai_eigen_RRR[i,] + K_m_RRR)^2\n      }\n      \n      temp1_RRR <- sum(matriks_temp_RRR)\n      \n      matriks_temp2_RRR <- matrix(0, nrow = nrow(matriksb_RRR))\n      for(i in 1:nrow(matriks_temp2_RRR)){\n        matriks_temp2_RRR[i,] <- (K_m_RRR*matriksb_RRR[i,])^2/(nilai_eigen_RRR[i,] + K_m_RRR)^2\n      }\n      \n      temp2_RRR <- sum(matriks_temp2_RRR)\n      MSE <- (S_kuadrat_Robust_RRR*temp1_RRR) + temp2_RRR\n      return(MSE)\n    })\n    \n    #MSE sesudah transformasi\n    MSE_2_RRR <- reactive({\n      data_Y_RRR <- as.data.frame(getdatavarDepRRR())\n      Estimator_RRR <- Final_RRR()$sesudah_RRR\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      data_Y_RRR <- as.matrix(data_Y_RRR)\n      data_X_RRR < -as.matrix(data_X_RRR)\n      Int_RRR <- Intercept_RRR()\n      \n      matriks1_RRR <- matrix(1, ncol = 1, nrow = nrow(data_Y_RRR))\n      data_X_RRR <- cbind(matriks1_RRR, data_X_RRR)\n      Estimator_RRR <- rbind(Int_RRR, Estimator_RRR)\n      data_X_RRR <- as.matrix(data_X_RRR)\n      Estimator_RRR <- as.matrix(Estimator_RRR)\n      \n      data_Y_cap_RRR <- data_X_RRR%*%Estimator_RRR\n      temp_mse1_RRR <- (data_Y_cap_RRR - data_Y_RRR)^2\n      MSE_sdh_RRR <- sum(temp_mse1_RRR)/(nrow(data_Y_RRR)-ncol(data_X_RRR))\n      return(MSE_sdh_RRR)\n    })\n    \n    #hasil R-square dan adj. R-square\n    R_sq_RRR <- reactive({\n      data_Y_RRR <- as.data.frame(getdatavarDepRRR())\n      Estimator_RRR <- Final_RRR()$sesudah_RRR\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      data_Y_RRR <- as.matrix(data_Y_RRR)\n      data_X_RRR < -as.matrix(data_X_RRR)\n      Int_RRR <- Intercept_RRR()\n      \n      matriks1_RRR <- matrix(1, ncol = 1, nrow = nrow(data_Y_RRR))\n      data_X_RRR <- cbind(matriks1_RRR, data_X_RRR)\n      Estimator_RRR <- rbind(Int_RRR, Estimator_RRR)\n      data_X_RRR <- as.matrix(data_X_RRR)\n      Estimator_RRR <- as.matrix(Estimator_RRR)\n      \n      data_Y_cap_RRR <- data_X_RRR%*%Estimator_RRR\n      temp1_RRR <- (data_Y_cap_RRR - data_Y_RRR)^2\n      temp2_RRR <- (data_Y_RRR - mean(data_Y_RRR))^2\n      \n      R_sqr_RRR <- 1- (sum(temp1_RRR)/sum(temp2_RRR))\n      Adj_R_sqr_RRR <- 1 - ((1-R_sqr_RRR)*(nrow(data_Y_RRR)-1)/(nrow(data_Y_RRR)-ncol(data_X_RRR)))\n      return(list(Rsq_RRR = R_sqr_RRR, Adj_RRR = Adj_R_sqr_RRR))\n    })\n    \n    #menampilkan plot\n    model_final_RRR <- reactive({\n      Estimator_RRR <- Final_RRR()$sesudah_RRR\n      data_X_seb_RRR <- as.data.frame(getdatavarIndepRRR())\n      \n      data_X_RRR <- as.matrix(data_X_seb_RRR)\n      Int_RRR <- Intercept_RRR()\n      \n      matriks1_RRR <- matrix(1, ncol = 1, nrow = nrow(data_X_RRR))\n      data_X_RRR <- cbind(matriks1_RRR, data_X_RRR)\n      Estimator_RRR <- rbind(Int_RRR, Estimator_RRR)\n      data_X_RRR <- as.matrix(data_X_RRR)\n      Estimator_RRR <- as.matrix(Estimator_RRR)\n      \n      data_Y_cap_RRR <- data_X_RRR%*%Estimator_RRR\n      \n      data_Y_cap_RRR <- as.data.frame(data_Y_cap_RRR)\n      colnames(data_Y_cap_RRR)[1] <- input$varDepRRR\n      model_finalRRR <- lm(data_Y_cap_RRR[,as.character(input$varDepRRR)] ~ ., data = data_X_seb_RRR)\n      return(model_finalRRR)\n    })\n    \n    output$plot_final_RRR <- renderPlot({\n      plot(model_final_RRR(), which = 2, main =\"Plot after analysis\")\n    })\n    \n    \n    #hasil yang ditampilkan dalam hal. analisis\n    output$hitung_RRR <- renderText({\n      \n      if(!is.null(input$Method_RRR)){\n        print1_RRR <- \"Result : \"\n        print2_RRR <- \"\"\n        \n        data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n        nama_var_RRR1 <- colnames(data_X_RRR)\n        \n        Estimator0_RRR <- Final_RRR()$sebelum_RRR\n        Estimator_RRR <- Final_RRR()$sesudah_RRR\n        MSError_RRR <- MSE_RRR()\n        MSError2_RRR <- MSE_2_RRR()\n        \n        print2_RRR <- paste(\"Coefficient before transformation :\")\n        print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n        \n        for(i in 1:length(nama_var_RRR1)){\n          print2_RRR <- paste(\"var\", i , \" : \", Estimator0_RRR[i])\n          print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n        }\n        \n        print2_RRR <- paste(\"MSE    : \", MSError_RRR)\n        print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n        \n        print1_RRR <- paste(print1_RRR, \"\", sep = \"\\n\")\n        \n        print2_RRR <- paste(\"Coefficient after transformation :\")\n        print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n        \n        print1_RRR <- hasil_RRR(print1_RRR)\n      } else print1_RRR <- NULL \n      paste(print1_RRR)\n    })\n    \n    \n    hasil_RRR <- function(print1_RRR){\n      data_X_RRR <- as.data.frame(getdatavarIndepRRR())\n      nama_var_RRR1 <- colnames(data_X_RRR)\n      \n      Estimator_RRR <- Final_RRR()$sesudah_RRR\n      MSError2_RRR <- MSE_2_RRR()\n      \n      print2_RRR <- paste(\"Intercept : \",Intercept_RRR())\n      print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n      \n      for(i in 1:length(nama_var_RRR1)){\n        print2_RRR <- paste(\"var\", i , \"    : \", Estimator_RRR[i])\n        print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n      }\n      \n      print2_RRR <- paste(\"MSE       : \", MSError2_RRR)\n      print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n      \n      Rsq_RRR <- R_sq_RRR()$Rsq_RRR\n      Adj_RRR <- R_sq_RRR()$Adj_RRR\n      print3_RRR <- paste(\"R square            : \", Rsq_RRR)\n      print2_RRR <- paste(\"Adjusted R-square   : \", Adj_RRR)\n      print1_RRR <- paste(print1_RRR, print3_RRR, print2_RRR, sep = \"\\n\")\n      \n      print1_RRR <- paste(print1_RRR, \"\", sep = \"\\n\")\n      print2_RRR <- paste(\"Where : \")\n      print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n      \n      for(i in 1:length(nama_var_RRR1)){\n        print2_RRR <- paste(\"var\", i , \" : \", nama_var_RRR1[i])\n        print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n      }\n      \n      return(print1_RRR)\n    }\n    \n    #halaman kesimpulan\n    output$kesimpulan2_RRR <- renderText({\n      input$Method_RRR\n      print0_RRR <- paste(\"Based on analysis result, can be concluded that :\")\n      \n      if(!is.null(input$Method_RRR)){\n        if(input$Method_RRR == \"M_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with M estimator\"\n        } else if(input$Method_RRR == \"S_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with S estimator\"\n        } else if(input$Method_RRR == \"MM_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with MM estimator\"\n        } else if(input$Method_RRR == \"LTS_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with LTS estimator\"\n        }\n        \n        print1_RRR <- paste(\"Method : \", jenis_RRR)\n        print2_RRR <- paste(\"Result : \")\n        print1_RRR <- paste(print0_RRR, print1_RRR, print2_RRR, sep = \"\\n\")\n        print2_RRR <- \"\"\n        print1_RRR <- paste(print1_RRR, print2_RRR, sep = \"\\n\")\n        \n        print1_RRR <- hasil_RRR(print1_RRR)\n      } else{\n        print1_RRR <- paste(\"Sorry, you haven't choose the method that will be used, yet\")\n      }\n      paste(print1_RRR)\n    })\n    \n    \n    ###############################\n    #######Fungsi Laporan##########\n    ###############################\n    \n    Leverage_RRR <- function(){\n      hat_data_RRR <- Leverage0_RRR()\n      \n      print1_hat_RRR <- paste(\"Data yang merupakan outlier menggunakan metode Leverage Values adalah : \")\n      print1_hat_RRR <- cat(print1_hat_RRR, \"\\n\")\n      \n      for(i in 1:nrow(hat_data_RRR)){\n        if(hat_data_RRR[i,2] == \"Outlier\" ){\n          print2_hat_RRR <- paste(\"- data ke-\", i, \"\\n\")\n          print1_hat_RRR <- cat(print1_hat_RRR, print2_hat_RRR)\n          \n        }\n      }\n      return(print1_hat_RRR)\n    }\n    \n    DFITS_RRR <- function(){\n      \n      DFIT_data_RRR <- DFITS0_RRR()\n      \n      print1_DFIT_RRR <- paste(\"Data yang merupakan outlier menggunakan metode DFITS adalah : \")\n      print1_DFIT_RRR <- cat(print1_DFIT_RRR, \"\\n\")\n      \n      for(i in 1:nrow(DFIT_data_RRR)){\n        if(DFIT_data_RRR[i,2] == \"Outlier\" ){\n          print2_DFIT_RRR <- paste(\"- data ke-\", i, \"\\n\")\n          print1_DFIT_RRR <- cat(print1_DFIT_RRR, print2_DFIT_RRR)  \n          \n        } \n      }\n      return(print1_DFIT_RRR)\n    }\n    \n    VIF_RRR1 <- function(){\n      VIF_RRR_data <- VIF_RRR0()\n      \n      print1_VIF_RRR <- paste(\"Variabel yang multikolinear adalah : \")\n      print1_VIF_RRR <- cat(print1_VIF_RRR, \"\\n\")\n      \n      for(i in 1:nrow(VIF_RRR_data)){\n        if(VIF_RRR_data[i,2] == \"Multicollinear\" ){\n          print2_VIF_RRR <- paste(\"- variabel ke-\", i, \" : \", VIF_RRR_data[i,1], \"\\n\")\n          print1_VIF_RRR <- cat(print1_VIF_RRR, print2_VIF_RRR)  \n          \n        } \n      }\n      return(print1_VIF_RRR)\n    }\n    \n    matkol_RRR <- function(){\n      matkol0_RRR()\n    }\n    \n    tol_RRR <- function(){\n      Tol_uji_RRR <- tol_RRR0()\n      \n      print1_Tol_RRR <- paste(\"Variabel yang multikolinear adalah : \")\n      print1_Tol_RRR <- cat(print1_Tol_RRR, \"\\n\")\n      \n      for(i in 1:nrow(Tol_uji_RRR)){\n        if(Tol_uji_RRR[i,2] == \"Multicollinear\" ){\n          print2_Tol_RRR <- paste(\"- variabel ke-\", i, \" : \", Tol_uji_RRR[i,1], \"\\n\")\n          print1_Tol_RRR <- cat(print1_Tol_RRR, print2_Tol_RRR)  \n          \n        } \n      }\n      return(print1_Tol_RRR)\n    }\n    \n    kesimpulan_rmd_RRR <- function(){\n      input$Method_RRR\n      print0_RRR <- cat(\"Berdasarkan hasil analisis, dapat diambil kesimpulan bahwa :\", \"\\n\")\n      \n      if(!is.null(input$Method_RRR)){\n        if(input$Method_RRR == \"M_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with M estimator\"\n        } else if(input$Method_RRR == \"S_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with S estimator\"\n        } else if(input$Method_RRR == \"MM_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with MM estimator\"\n        } else if(input$Method_RRR == \"LTS_RRR\"){\n          jenis_RRR <- \"Robust Ridge Regression with LTS estimator\"\n        }\n      }\n      \n      print1_RRR <- cat(\"Metode : \", jenis_RRR, \"\\n\")\n      print2_RRR <- cat(\"Hasil Estimator : \")\n      \n      print1_RRR <- cat(print0_RRR, print1_RRR, \"\\n\", print2_RRR)\n      \n      print1_RRR <- hasil_RRR(print1_RRR)\n      \n      return(print1_RRR)\n    }\n    \n  }\n})",
    "created" : 1503284910462.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1998042648",
    "id" : "3D42E04B",
    "lastKnownWriteTime" : 1486030669,
    "last_content_update" : 1486030669,
    "path" : "~/Skripsi/2/fast-beta - Copy/fast-beta/tools/analysis/robust_ridge.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}