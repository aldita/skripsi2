{
    "collab_server" : "",
    "contents" : "##apriori###\n############\n\n# library(arules)\n# library(arulesViz)\nobserve({\n  if (identical(input$nav_fast, \"apriori\")) \n    updateTabsetPanel(session,\"tabApr\", selected = \"Data\")\n\n\n####Metode, Tools, dataset####\n##############################\noutput$introdApr <- renderUI({\n  wellPanel(HTML(\n    paste(\n      \"<label><strong>Menu:\", \"Association Rules\",\"</strong></label>\"\n    )\n  ),\n  HTML(\n    paste(\n      \"<label><strong>Tool:\", isolate(input$nav_fast),\"</strong></label>\"\n    )\n  ),\n  HTML(\n    paste(\n      \"<br><label><strong>Data:\", isolate(input$datasets),\"</strong></label>\"\n    )\n  ),\n  helpAndReport2(\n    'apriori','aprioriHelp', inclMD2(\"tools/help/aprioriHelp.md\")\n  )\n  )\n})\n\n\n#####Home Apriori######\n#######################\n\noutput$apriori <- renderUI({\n  sidebarLayout(sidebarPanel(\n    div(\n      class = \"busy\",\n      p(\"Calculation in progress...\"),\n      img(src = \"ajaxloaderq.gif\")\n    ),\n    uiOutput(\"introdApr\"),\n    bsCollapse(\n      open = \"Select Data\",\n      bsCollapsePanel(\n        \"Select Data\",\n        wellPanel(\n          uiOutput(\"chooseVarApr\"),\n          uiOutput(\"selectDeselect\"),\n          br(),\n          checkboxInput(\n            \"singleToBasket\",h5(\"Aggregrate from single item to basket?\"), FALSE\n          ),\n          conditionalPanel(condition = \"input.singleToBasket==true\",\n                           uiOutput(\"chooseId\")),\n          checkboxInput(\"removeDataApr\",h5(\"Remove duplicated item\"), FALSE),\n          radioButtons(\n            \"basketBy\", \"Basket by:\",\n            c(\"row\" = \"row\",\n              \"column\" = \"column\"), selected = \"row\"\n          ),\n          uiOutput(\"preApr\"),\n          br()\n        )\n      ),\n      \n      bsCollapsePanel(\"Select Parameter\",\n                    uiOutput(\"paramApr\"),\n                                br()),\n      bsCollapsePanel(\"Adjust Plot\",\n                      wellPanel(uiOutput(\"sidePlot\"),\n                                br())),\n      bsCollapsePanel(\n        \"Report Result \",\n        wellPanel(\n          strong(\"Generate Your Report\"),\n          radioButtons(\"formatApriori\", \"Document format:\", c(\"Word\",\"PDF\" ,\"HTML\")),\n          downloadButton(\"downloadReportApriori\"),\n        helpText(strong(\"Share your report: \")),\n        bsButton(\"aprioriShareForum\", \"SHARE to Forum\", style = \"primary\", type = \"action\"),br(),br()\n      ),\n      bsModal2(\"popAprioriShareForum\", \"Share Your Analysis\", trigger = \"aprioriShareForum\",\n               uiOutput(\"modalShareApriori\")))\n      )\n  ),\n  mainPanel(tabsetPanel(\n    id = \"tabApr\",\n    tabPanel(\"Data\",\n             tabsetPanel(\n               tabPanel(\"Raw Data\", uiOutput(outputId = \"preprop\")),\n               tabPanel(\n                 \"Transaction Data\",\n                 div(\n                   class = \"busy\",\n                   p(\"Calculation in progress...\"),\n                   img(src = \"ajaxloaderq.gif\")\n                 ),\n                 uiOutput(outputId = \"transaksiApr\")\n               )\n             ),\n             value = 1),\n    tabPanel(\"Summary\",\n             uiOutput(outputId = \"summaryApr\"),\n                      tabsetPanel(\n                        id = \"tabSum\",\n                        tabPanel(\n                          \"Frequency Item\",\n                          div(\n                            class = \"busy\",\n                            p(\"Calculation in progress...\"),\n                            img(src = \"ajaxloaderq.gif\")\n                          ),\n                          HTML(paste(\"Frequency of each Item :\")),\n                          dataTableOutput(\"iFreq\"), br(),\n                          HTML(paste(\"Frequency of combination Item :\")),\n                          dataTableOutput(\"combFreqItemAprUI\"), br()\n                        ),\n                        tabPanel(\n                          \"Rules\",\n                          wellPanel(style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n                                    dataTableOutput(\"rulesApr\"))\n                      )),\n             value = 2),\n    tabPanel(\"Plot\",\n             uiOutput(outputId = \"plotApr\"),\n             value = 3)\n  )))\n})\n\n\n############SIDEBAR AND MAIN PREPROCESSING DATA##########\n#########################################################\n\n#Getting data\ndat <- reactive({\n  getdata()\n})\n\n#Getting var of data for general\nvars <- reactive({\n  if (!is.null(dat()))\n    var <- names(dat())\n  else\n    var <- NULL\n  var\n})\n\n#getting variable data for item\nvariable <- reactive({\n  if (!is.null(vars()))\n    var <- as.list(vars()[])\n  else\n    var <- NULL\n  var\n})\n\n#getting variable if there is id for basket item\nid <- reactive({\n  if (!is.null(vars()))\n    var <-\n      as.list(vars()[which(!(vars() %in% input$chooseVar))])\n  else\n    var <- NULL\n  var\n})\n\n#UI pilih variabel\noutput$chooseVarApr <- renderUI({\n  if (!is.null(input$selectDeselect)) {\n    if (input$selectDeselect %% 2 == 0) {\n      selectInput(\n        \"chooseVar\",\"Select one or more variables:\",variable(),selected = variable(),multiple =T\n      )\n    } else {\n      selectInput(\n        \"chooseVar\",\"Select one or more variables:\",variable(),selected = NULL,multiple =T\n      )\n    }\n  }\n})\n\n#UI select deselect\noutput$selectDeselect <- renderUI({\n  if (!is.null(variable())) {\n    actionButton(\"selectDeselect\", \"Select/Deselect all\", class = \"btn-block btn-primary\")\n  }\n})\n\n#UI memilih id \noutput$chooseId <- renderUI({\n  selectInput(\"chooseId\",\"aggregrate by:\",id(),selected = NULL,multiple= T)\n})\n\n#UI preprop\noutput$preprop <- renderUI({\n  list(\n    wellPanel(style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n              renderDataTable({\n                shiny::validate(need(input$chooseVar !=\"\", \"Choose Variable of Data from 'Select Data' Sidebar\"))\n                rawdata()},\n                options = list(\n                  orderClasses = TRUE, bCaseInsensitive = TRUE,\n                  lengthMenu = c(100, 200, 500), pageLength = 100\n                )\n              )\n)\n  )\n})\n\n#UI untuk transaksi Data\noutput$transaksiApr <- renderUI({\n  list(\n    wellPanel(\n      style = \"overflow-y:scroll; max-width: 960px; max-height : 600px\",\n      renderDataTable(outDataTrans()),options = list(\n        orderClasses = TRUE, bCaseInsensitive = TRUE,\n        lengthMenu = c(100, 200, 500), pageLength = 100\n      )\n    )\n  )\n})\n\n#fungsi transaksi data\noutDataTrans <- reactive({\n  odt <- as(dataTrans(), \"data.frame\")\n  dtfram <- as.data.frame(cbind(odt[2],odt[1]))\n  colnames(dtfram) <- c(\"transaction ID\",\"item set\")\n  return(dtfram)\n})\n\nrawdata <- reactive({\n dfVardata <- as.matrix(dat()[,input$chooseVar])\n  dfVarId <- as.matrix(dat()[,input$chooseId])\n  df <- as.data.frame(cbind(dfVarId,dfVardata))\n  # colnames(df) <- c(names(dfVarId),names(dfVardata))\n  return(df)\n})\n\n#fungsi transaksi data before\ndataTrans <- function()\n{\n  tr_basket <- rawdata()\n  \n  if (!is.null(input$chooseId))\n  {\n    tr_basket <- split(tr_basket[,2],tr_basket[,1]) #aggr\n    if (input$removeDataApr == TRUE) {\n      tr_basket2 <- sapply(1:length(tr_basket), function(x) unique(tr_basket[[x]])) #rm.duplicated\n      # tr_basket<-as.data.frame(tr_basket)\n    ap<-sapply(1:length(tr_basket2), function(x) if(length(tr_basket2[[x]])>1) paste(tr_basket2[[x]]))\n    names(ap)<-names(tr_basket)\n    tr_basket<-ap[!sapply(ap,is.null)]\n    }\n  }\n  if (input$basketBy == \"column\")\n  {\n    # tr_basket<-as.data.frame(tr_basket)\n    tr_basketdf <- t(tr_basket)\n    tr_basket <- as.data.frame(tr_basketdf)\n    tr_basket[tr_basket == \"\"] <- NA\n    colnames(tr_basket) <- paste(\"item\",1:length(tr_basket))\n  }\n  hasil <- as(tr_basket,\"transactions\")\n  return(hasil)\n}\n\n############SIDEBAR AND MAIN SUMMARY#####################\n#########################################################\n\noutput$summaryApr <- renderUI({\n  list(\n    div(\n      class = \"busy\",\n      p(\"Calculation in progress...\"),\n      img(src = \"ajaxloaderq.gif\")\n    )\n    )\n})\n\n#UI frequency each item\noutput$iFreq <- renderDataTable({\n  shiny::validate(need(input$minSupApr !=\"\", \"Mininum Support has not adjusted. Please open 'Select Parameter' Sidebar\"))\n  chooseFreq()}, options = list(\n    orderClasses = TRUE, bCaseInsensitive = TRUE,\n    lengthMenu = c(10, 20, 30), pageLength = 10\n  )\n)\n\n#fungsi freq\nchooseFreq <- function() {\n  frequency <- itemFrequency(dataTrans())\n  frequency <- as.data.frame(frequency)\n  item<-rownames(frequency)\n  datfram <- as.data.frame(cbind(item,frequency))\n  minsup <- minSupApr()\n  minsupCount <- minsup \n  datfram <- datfram[datfram$frequency >= minsupCount,] #prune!\n  return(datfram)\n}\n\n#fungsi before item kombinasi (hasil -> items,support)\ntableItemset <- function(itemset) {\n  d <- inspect(dataTrans())[1]  #item pada transaksi\n  f <- sapply(1:nrow(d), function(x) gsub(\"\\\\{|\\\\}\",\"\",as.character(d[x,1]))) #ekstak item, ilangin \n  g <- strsplit(f,\",\")\n  item2 <- chooseFreq()[,1]\n  b <- combn(item2,itemset)\n  combination <- sapply(1:ncol(b),function(i)  paste(b[,i], collapse = \",\"))\n  names(data) <- NULL\n  a.new.list <- sapply(1:length(g), function(i)  paste(g[[i]], collapse = \",\"))\n  dfs <- lapply(list(a.new.list, combination), function(x)  melt(strsplit(x, \",\")))\n  m <- merge(dfs[[2]], dfs[[1]], by = 1)\n  f <- function(n) sum(aggregate(value ~ L1.y, m[m$L1.x == n,], function(x) length(unique(x)) == itemset)$value)\n  frequency <- sapply(1:length(combination), f)\n  frequency <- as.data.frame(as.numeric(frequency/nrow(dataTrans())))\n  datfram <- as.data.frame(cbind(combination, frequency))\n  colnames(datfram) <- c(\"combination\",\"frequency\")\n  minsup <- minSupApr()\n  minsupCount <- minsup \n  datfram <- datfram[datfram$frequency >= minsupCount,]\n  return(datfram)\n}\n\n#fungsi kombinasi item sesuai permintaan\ncalltableItemset <- reactive({\n  comb <- combFreqItemApr()\n  if (comb == 1) return()\n    tableItemset(comb)\n})\n\noutput$combFreqItemAprUI <- renderDataTable({\n  shiny::validate(need(input$kfreq==TRUE && input$combFreqItemApr!=1, \"Please choose the k-itemset for knowing the Frequency in 'Frequency of Combination itemsets'\"))\n    calltableItemset()}\n  ,  options = list(\n    orderClasses = TRUE, bCaseInsensitive = TRUE,\n    lengthMenu = c(5, 10, 15), pageLength = 5\n  ))\n\n#UI rules\noutput$rulesApr <- renderDataTable(\n  dataRules(),  options = list(\n    orderClasses = TRUE, bCaseInsensitive = TRUE,\n    lengthMenu = c(5, 10, 15), pageLength = 5\n  ))\n\n#fungsi tampil rules\ndataRules <- function() {\n  data<- fungsi()\n  if (!is.null(input$intmeasure)) {\n    quality(data) <-\n      cbind(\n        quality(data), interestMeasure(data,c(input$intmeasure), dataTrans())\n      )}\n    return(inspect(data))\n}\n\n#fungsi rules\nfungsi <- reactive( {\n  rules<-apriori(\n    dataTrans(), parameter = list(\n      supp = minSupApr(), conf = minConfApr(), minlen = 2, maxlen = maxIApr()\n    ))\n  if(input$removeRedundant==TRUE){\n    subset.matrix <- is.subset(rules,rules)\n    subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA\n    redundant <- colSums(subset.matrix, na.rm=T) >= 1\n    rules.pruned <- rules[!redundant]\n    rules<-rules.pruned\n  }\n  return(rules)\n})\n\n#UI parameter\noutput$paramApr <- renderUI({\n  wellPanel(uiOutput(\"paramFreq\"),\n            uiOutput(\"paramRule\"),\n            uiOutput(\"paramHasil\")\n            )\n})\n\noutput$paramFreq <- renderUI({\n  wellPanel(\n    checkboxInput(\n      \"kfreq\",h5(\"Do you want to know the frequency of combination itemsets?\"), FALSE\n    ),\n    conditionalPanel(\n      condition = \"input.kfreq==true\",\n      numericInput(\n        \"combFreqItemApr\",\"Frequency of Combination Itemsets :\",value = 1,\n        min = 1, step = 1\n      )\n    )\n  )\n})\noutput$paramRule <- renderUI({\n  wellPanel(\n    numericInput(\n      \"minSupApr\",\"Minimum Support :\", min = 0.0001, max = 1, value =\n        0.1, step = 0.0001\n    ),\n    numericInput(\n      \"minConfApr\",\"Minimum Confidence :\", min = 0.0001, max = 1.0001, value = 0.1,step =\n        0.0001\n    ),\n    numericInput(\n      \"maxIApr\",\"Max number of item per itemset :\", min = 2,value = 10, step = 1\n    ),\n    checkboxInput(\"removeRedundant\", \"Remove redundant\", FALSE)\n    #actionButton(\"getRules\",\"Get Results\")\n  )\n  \n})\n\noutput$paramHasil <- renderUI({\n  wellPanel(\n    checkboxInput(\n      \"intMea\",h5(\"Do you want to know the other Interest Measure?\"), FALSE\n    ),\n    conditionalPanel(\n      condition = \"input.intMea==true\",\n      checkboxGroupInput(\n        \"intmeasure\", \"Choose other interest measure:\",\n        c(\n          \"chi-squared\" = \"chiSquared\",\n          \"kulczynski\" = \"kulczynski\",\n          \"imbalance\" = \"imbalance\"\n        )\n      )\n    )\n  )\n})\n\n\ncombFreqItemApr <- function() {\n  comb <- input$combFreqItemApr\n  if (comb < 2) {\n    comb <- 1\n    updateNumericInput(session,\"combFreqItemApr\", value = 1)\n  }\n  return(comb)\n}\n\nminSupApr <- function() {\n  minSup <- input$minSupApr\n  if (minSup < 0.001) {\n    minSup <- 0.1\n    updateNumericInput(session,\"minSupApr\", value = 0.1)\n  }\n  return(minSup)\n}\n\nminConfApr <- function() {\n  minConf <- input$minConfApr\n  if (minConf < 0.0001) {\n    minConf <- 0.1\n    updateNumericInput(session,\"minConfApr\", value = 0.01)\n  }\n  return(minConf)\n}\nmaxIApr <- function() {\n  maxI <- input$maxIApr\n  if (maxI < 2) {\n    maxI <- 2\n    updateNumericInput(session,\"maxIApr\",2)\n  }\n  return(maxI)\n}\nnumberRuleApr <- function() {\n  nr <- input$numberRuleApr\n  if (nr > length(fungsi())) {\n    nr <- length(fungsi())\n    updateNumericInput(session,\"numberRuleApr\", value = length(fungsi()))\n  }\n  return(nr)\n}\n###########PLOT##########################\n#########################################\noutput$sidePlot<-renderUI({\n  wellPanel(\n  numericInput(\"topNFreq\", \"Number of Top Frequency :\", nrow(chooseFreq()), min=1, step=1),\n  numericInput(\n    \"numberRuleApr\",\"Number of Rules :\", nrow(dataRules()) ,min = 1, step = 1)\n)})\n\nnumberRuleApr <- function() {\n  nr <- input$numberRuleApr\n  #   if (nr > length(fungsi())) {\n  #     nr <- length(fungsi())\n  #     updateNumericInput(session,\"numberRuleApr\", value = length(fungsi()))\n  #   }\n  return(nr)\n}\ntopNFreq<- function() {\n  nr <- input$topNFreq\n  #   if (nr > length(fungsi())) {\n  #     nr <- length(fungsi())\n  #     updateNumericInput(session,\"numberRuleApr\", value = length(fungsi()))\n  #   }\n  return(nr)\n}\n\noutput$plotApr <- renderUI(tabsetPanel( \n  tabPanel(\"Frequency Plot\",\n           div(\n             class = \"busy\",\n             p(\"Calculation in progress...\"),\n             img(src = \"ajaxloaderq.gif\")\n           ),\n           renderPlot(itemFrequencyPlot(dataTrans(\n  ), topN=topNFreq()))),\n  tabPanel(\"Scatter Plot\",  \n           div(\n             class = \"busy\",\n             p(\"Calculation in progress...\"),\n             img(src = \"ajaxloaderq.gif\")\n           ),\n           plotOutput(\"biasaPlot\")),\n  tabPanel(\"Grouped Plot\",  \n           div(\n             class = \"busy\",\n             p(\"Calculation in progress...\"),\n             img(src = \"ajaxloaderq.gif\")\n           ),\n           plotOutput(\"groupedPlot\")),\n  tabPanel(\"Graph Plot\",    \n           div(\n             class = \"busy\",\n             p(\"Calculation in progress...\"),\n             img(src = \"ajaxloaderq.gif\")\n           ),\n           plotOutput(\"graphPlot\")),\n  tabPanel(\"Paracoord Plot\",  \n           div(\n             class = \"busy\",\n             p(\"Calculation in progress...\"),\n             img(src = \"ajaxloaderq.gif\")\n           ),\n           plotOutput(\"paracoordPlot\"))\n))\n\nsampel <-reactive( {\n  sample(fungsi(),numberRuleApr())\n})\noutput$biasaPlot <- renderPlot({                \n    shiny::validate(need(input$numberRuleApr !=\"\", \"Please adjust the number of rules for Plotting in 'Adjust Plot' sidebar\"))\n    splot()\n  })\noutput$groupedPlot <- renderPlot({\n   shiny::validate(need(input$numberRuleApr !=\"\", \"Please adjust the number of rules for Plotting in 'Adjust Plot' sidebar\"))\n  goplot()\n  })\noutput$graphPlot <- renderPlot({\n   shiny::validate(need(input$numberRuleApr !=\"\", \"Please adjust the number of rules for Plotting in 'Adjust Plot' sidebar\"))\n  gaplot()\n  })\noutput$paracoordPlot <- renderPlot({\n  shiny::validate(need(input$numberRuleApr !=\"\", \"Please adjust the number of rules for Plotting in 'Adjust Plot' sidebar\"))\n  pplot()\n  })\n\nsplot<- reactive({plot(sampel())})\ngoplot<- reactive({plot(sampel(), method = \"grouped\")})\ngaplot<- reactive({plot(sampel(), method = \"graph\")})\npplot<- reactive({plot(sampel(), method = \"paracoord\", control=list(reorder=TRUE))})\n\n})\n#####REPORT GENERATE####\n########################\n\noutput$downloadReportApriori <- downloadHandler(\n  filename = function() {\n    paste('Result Apriori', sep = '.', switch(\n      input$formatApriori, Word = 'docx', PDF = 'pdf', HTML = 'html'\n    ))\n  },\n  content = function(file) {\n    src <- normalizePath('resultApriori.Rmd')\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n    owd <- setwd(tempdir())\n    on.exit(setwd(owd))\n    file.copy(src,'resultApriori.Rmd')\n    \n    library(rmarkdown)\n    out <- render('resultApriori.Rmd', switch(\n      input$formatApriori,\n      PDF = pdf_document(), HTML = html_document(), Word = word_document()\n    ))\n    file.rename(out, file)\n  }\n)\n\n# resultApriori <- reactive({\n#   source(paste(getwd(),\"/tools/analysis/apriori.R\", sep=''))\n#   return(dataRules())\n# })\n\n##########SHARE TO FORUM######\n##############################\noutput$modalShareApriori <- renderUI({\n  user <- getUsernameFromDB()\n  if(nrow(user)==0){\n    list(\n      helpText(\"Please login into Fast Forum for using this feature\"),\n      bsAlert(\"modalAlert\")\n    )\n  }else{\n    list(\n      helpText(\"This feature allows you to share your analysis to the Forum in the Apriori Subforum.\"),\n      bsAlert(\"modalAlert\"),\n      textInput(\"subjectAprioriForum\", strong(\"Subject :\") , value = \"\"),br(),\n      strong(\"Content :\"),br(),\n      HTML('<textarea id=\"contentAprioriForum\" rows=\"5\" cols=\"20\", class = \"form-control\"></textarea>'), br(),\n      #selectInput(\"chooseCategoryShareFgwc\",\"Choose Category\",getListNode()$name), br(), br(),\n      footer = list(\n        bsButton(\"shareAprioriForum\", \"Submit to Forum\", style=\"primary\", type = \"action\"),\n        tags$button(type = \"button\", class = \"btn btn-default\", 'data-dismiss' = \"modal\", \"Close\")\n      )\n    )\n  }\n  \n})\n\nobserveEvent(input$shareAprioriForum,{\n  postAprioritoForum()\n  \n})\n\npostAprioritoForum <- function(){\n  # library(rmarkdown)\n  time <- format(Sys.time(),\"%a%b%d%y%H%M%S\")\n  if(nrow(getUsernameFromDB()) != 0){\n    folder <- getUsernameFromDB()\n    dir <- paste0(\"C:\\\\xampp\\\\htdocs\\\\fast_forum\\\\media\\\\\",folder,\"\\\\\",time)\n  }else{\n    dir <- paste0(\"C:\\\\xampp\\\\htdocs\\\\fast_forum\\\\media\\\\NoName\\\\\",time)\n  }\n  out <- render('resultApriori.Rmd',\"html_document\",output_dir = dir,output_file = \"Apriori.html\")\n  frame <- paste0(\"<iframe src=''\",\"http://localhost/fast_forum/media/\",folder,\"/\",time,\"/Apriori.html''\",\" width= ''100%'' height=''800px''></iframe>\")\n  content <- paste0(\"<p>\",input$contentAprioriForum,\"</p>\",\"</br>\",frame,\"</br>\")\n  insertTopic(input$subjectAprioriForum,content,input$chooseCategoryShareApriori)\n}\n\n\n",
    "created" : 1503291638202.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1894321819",
    "id" : "AD46EBE3",
    "lastKnownWriteTime" : 1499097516,
    "last_content_update" : 1499097516,
    "path" : "~/Skripsi/2/fast-beta - Copy/fast-beta/tools/analysis/apriori.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}